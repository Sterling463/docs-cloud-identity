<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
<!ENTITY % common SYSTEM "../../common/common.ent">
%common;
]>

<chapter xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
    xml:id="Overview-Keystone-API-d1e62">
 
<title>General API Information</title>
    
	<para>
		The authentication service allows clients to obtain
		tokens that can be used to access cloud services such as those
		provided by Rackspace and OpenStack.</para>
	
	<para>The authentication service API is implemented using a ReSTful
			web service interface. All requests to authenticate and
			operate against the authentication service should be 
			performed using SSL over HTTP (HTTPS) on TCP port
			443.</para>
	
	<!--Note the Admin concepts section contains a workflow diagram not included in Dev guide.  
		That's why the xi:include content is conditional.-->
	
	<xi:include condition="admin" href="identity-concepts-admin.xml"/>
	<xi:include condition="client" href="section_identity-concepts.xml"/>
	
	<section xml:id="Request_Response_Types-d1e149">
		<title>Request/Response Types</title>
		<para>The &CIS; v2 API supports both the JSON and XML data serialization request and response
			formats. Some operations also support the Atom Syndication Format for responses. If you
			do not specify a format type, <code>JSON</code> is the default. <xref
				linkend="Response_Types"/> provides a summary of the available formats.</para>

				<table rules="all" width="884" xml:id="Response_Types">
			<caption>Supported Request and Response formats</caption>
			<col width="14%"/>
			<col width="36%"/>
			<col width="204pt"/>
			<col width="18%"/>
			<col width="80px"/>
			<thead valign="baseline">
				<tr>
					<td>Format</td>
					<th>Content-Type  header</th>
					<td>Accept header</td>
					<td>Query Extension for request URI</td>
					<td>Default</td>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>JSON</td>
					<td><code>Content-Type application/json</code></td>
					<td><code>application/json</code></td>
					<td>.json</td>
					<td>Yes</td>
				</tr>
				<tr>
					<td>XML</td>
					<td><code>Content-Type application/xml</code></td>
					<td><code>application/xml</code></td>
					<td>.xml</td>
					<td>No</td>
				</tr>
				<tr>
					<td>Atom</td>
					<td/>
					<td><code>application/atom+xml</code></td>
					<td>.atom</td>
					<td>No</td>
				</tr>
			</tbody>
		</table>
		<variablelist>
			<varlistentry>
			<term><code>Content-Type</code> header syntax</term>
				<listitem>
					<para>You specify the request format in the <code>Content-Type</code> header. This header is
					required for operations that have a request body.  The following code sample shows the
					syntax for the <code>Content-Type</code> header:
					</para>
				<para>
					<programlisting>Content-Type: application/<parameter>format</parameter></programlisting>
				</para>
				<para>Where <parameter>format</parameter> is either <literal>json</literal> or <literal>xml</literal>.</para>
			</listitem>
		</varlistentry>
		</variablelist>
		<para>You can specify the response format using either the <code>Accept</code> header or a
			query extension:</para>
		<variablelist>
			<varlistentry>
				<term><code>Accept</code> header syntax</term>
				<listitem>
					<para>
						<programlisting>Accept: application/format</programlisting> 
					</para>
					<para>Where <code>format</code> can be either <code>json</code> or 
						<code>xml</code>.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Query extension syntax</term>
				<listitem>
					<para>Add an <code>.xml</code> or <code>.json</code> extension to the request
						URI. For example, the <code>.xml</code> extension in the following URI
						request specifies that the response body is returned in XML format.</para>
					<para>
						<programlisting>POST /v2/010101/servers.xml</programlisting>
					</para>
					<para>
						If you specify different formats for the Accept header and the query extension, the format
						specified in the query extension takes precedence. For example, if the query
						extension is <code>.xml</code> and the Accept header specifies
						<code>application/json</code>, the response is returned in XML
						format.
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>
	<section xml:id="Sample_Request_Response-d1e64">
		<title>Sample Authentication Request and Response</title>
		<para> The sample request and response in this section illustrate a
			general case. In your authentication request, use your own
			credentials rather than the sample values shown here for
				<code>user name</code>, <code>password</code>. and
				<code>tenantId</code>.  When you authenticate
			successfully, the response to your authentication request
			will include a catalog of the services to which you have
			subscribed rather than the sample values shown here. </para>
	  <example>
		<title>Authentication Request with Headers: JSON</title>
		<programlisting language="xml">
<xi:include href="../samples/samplerequestheader.txt" parse="text"/>
		</programlisting>
	  	<programlistingco>
	  		<areaspec>
	  			<area xml:id="request.json.user" units="linecolumn" coords="5 32"/>
	  			<area xml:id="request.json.password" units="linecolumn" coords="6 27"/>
	  			<area xml:id="request.json.tenant" units="linecolumn" coords="8 23"/>
	  		</areaspec>	
<programlisting language="javascript">
<xi:include href="../samples/auth_credentials.json" parse="text"/>
</programlisting>
</programlistingco>	
	  </example>
		<calloutlist>
			<callout arearefs="request.json.user">
				<para> 
					This is the user name you use to login to the Rackspace
					Cloud Control Panel at <link xlink:href="http://mycloud.rackspace.com/">http://mycloud.rackspace.com/</link>.</para>
				<para> </para>
			</callout>
			<callout arearefs="request.json.password">
				<para>
					This is the password you use to login to the Rackspace Cloud Control Panel.</para>
				<para> </para>
			</callout>
			<callout arearefs="request.json.tenant">
				<para> 
					Tenant is an optional specification. 
					Some services use multi-level authentication, with service-specific credentials
					in addition to vendor-specific credentials. 
					In such cases, associating a user with a tenant can
					be a method of passing that additional level of identifying information to the service.
				</para>
				<para> </para>
			</callout>
		</calloutlist>	
		<para>A successful authentication response includes a token and a
			service catalog. For each service in the service catalog,
			only relevant details are returned. Service descriptions
			vary depending on how the service has been configured. For
			example, some service endpoints might be associated with a
			default region. For those services, the <code>region</code> specification is included in the
			description. If the service endpoint does not have a
			default region defined, the service description does not
			include <code>region</code>.</para>
	  <example>
		<title>Service Catalog in Authentication Response with Headers: XML</title>
		<programlisting language="xml">
<xi:include href="../samples/sampleresponseheader.txt" parse="text"/>
		</programlisting>
	  	<programlistingco>
	  		<areaspec>
	  			<area xml:id="response.xml.namespaces" units="linecolumn" coords="4 8"/>
	  			<area xml:id="response.xml.token" units="linecolumn" coords="13 11"/>
	  			<area xml:id="response.xml.userdefault" units="linecolumn" coords="18 68"/>
	  			<area xml:id="response.xml.role" units="linecolumn" coords="19 16"/>
	  			<area xml:id="response.xml.catalog" units="linecolumn" coords="24 21"/>
	  			<area xml:id="response.xml.servicetype" units="linecolumn" coords="49 37"/>
	  			<area xml:id="response.xml.servicename" units="linecolumn" coords="49 56"/>
	  			<area xml:id="response.xml.region" units="linecolumn" coords="50 35"/>
	  			<area xml:id="response.xml.tenant" units="linecolumn" coords="50 83"/>
	  			<area xml:id="response.xml.url" units="linecolumn" coords="52 114"/>
	  		</areaspec>	
		<programlisting language="xml">
<xi:include href="../samples/auth-annotated.xml" parse="text"/>
		</programlisting>
	  	</programlistingco>			
	  </example>
		<calloutlist>
			<callout arearefs="response.xml.namespaces">
				<para>
					In XML responses only, 
					a list of namespaces identifies API extensions that add functionality to the core API.
					You can read more about namespaces in 
					<xref linkend="Namespaces-d1e910"></xref>.
				</para>
				<para> </para>
			</callout>
			<callout arearefs="response.xml.token">
				<para>This token can be presented to a service as evidence of authentication.
					Tokens are valid for a finite duration; a token's default lifespan is twenty-four hours. 
				</para>
				<para>The token's <code>expires</code> attribute denotes the time after which the token will
					automatically become invalid. This attribute predicts the maximum lifespan for
					token validity but does not guarantee the token expiration time because a token
					can be revoked manually before it expires.  Clients are encouraged to cache a
					token until it expires.</para>
				<para> </para>
			</callout>
			<callout arearefs="response.xml.userdefault">
				<para> 
					Users can be assigned a default region so that, when there is a choice between multiple endpoints associated with a 
					service in the user's catalog, the endpoint for the user's default region will be selected if it is available.
					In this example, the user's default region is <code>DFW</code> and several of the services in the user's catalog offer endpoints in that region and the 
					<code>ORD</code> region; this user's work will be directed to the <code>DFW</code> region whenever possible.
				</para>
				<para> </para>
			</callout>
			<callout arearefs="response.xml.role">
				<para> 
					Users can be assigned multiple roles, with each role providing specific privileges.
					In this example, <code>joeuser</code> is the administrative user for the account,
					holding the fully-privileged <code>identity:user-admin</code> role.
					Other users might hold other roles with different privileges.
					Roles need not be associated with actual job functions such as Administrator, Operator, Developer, Tester, or Trainer.
				</para>
				<para> </para>
			</callout>
			<callout arearefs="response.xml.catalog">
				<para>
					The service catalog lists the services this user can
					access. In this example, the user can access two
					compute services (Cloud Servers OpenStack and
					Cloud Servers) and two object storage services
					(Cloud Files Content Distribution Network (CDN),
					and Cloud Files), as well as one database service, one DNS service, one load balancing service,
					and one monitoring service.
					The catalog listing for each
					service provides at least one endpoint URL for
					that service. Other information, such as regions
					and versions and tenants, is provided if it's
					relevant to this user's access to this service. </para>
				<para> </para>
			</callout>
			<callout arearefs="response.xml.servicetype">
				<para> 
					The service type attribute identifies services that perform similar functions, whatever those services might be named. 
					In this example, the services named <literal>cloudServers</literal> and <literal>cloudServersOpenstack</literal> are both identified as <code>type="compute"</code>, 
					identifying them as compute services even though the word "compute" does not appear in their names.
				</para>
				<important>
					<para>
						Use service type as the primary value for
						locating a service. If multiple endpoints of the
						same service type exist in the same region, use
						service name as the tiebreaker.</para>
				</important>
				<para> </para>
			</callout>
			<callout arearefs="response.xml.servicename">
				<para> 
					The service name attribute identifies each unique service in the catalog.
					Once a service is created, its name does not change. However, new services of the same service type may be added to the catalog with new names.
				</para>
				<important>
					<para>
						When you parse an authentication response programmatically,
						use <code>service type</code> rather than <code>service name</code> as 
						the basis for determining whether a user has access to
						a particular kind of service. Service type is stable
						across all releases; new service types can be added, 
						but existing service types are not renamed.
						In this example,
						<code>type="compute"</code> identifies all the
						available compute services, one of which is named
						cloudServers and one of which is named
						<literal>cloudServersOpenStack</literal>. New compute service names may be added 
						in future releases; whatever the compute services are
						named, you can always
						recognize them by parsing for
						<code>type="compute"</code> in the authentication
						response's service catalog. </para>
				</important>
				<para> </para>
			</callout>
			<callout arearefs="response.xml.region">
				<para> A service may expose endpoints in different regions.
					Regional endpoints allow clients to provision
					resources in a manner that provides high
					availability.  </para>
				<para> Some services are not region-specific. These services supply a single
					non-regional endpoint and do not provide access to internal URLs. </para>
				<para> </para>
			</callout>
			<callout arearefs="response.xml.tenant">
				<para> Some services recognize specification of a tenant. If a
					service does recognize tenants, the format of the
					tenant specification is defined only by the
					service; for details about whether and how to
					specify a tenant, check the documentation for the
					service you are using.</para>
				<para> </para>
			</callout>
			<callout arearefs="response.xml.url">
				<para>
					An endpoint can be assigned public and internal URLs. A
					public URL is accessible from anywhere. Access to a public
					URL usually incurs traffic charges. Internal URLs are only
					accessible to services within the same region. Access to
					an internal URL is free of charge.
				</para>
				<para> </para>
			</callout>
		</calloutlist>
		<example>
			<title>Service Catalog in Authentication Response: JSON</title>
			<programlistingco>
				<areaspec>
					<area xml:id="response.json.catalog" units="linecolumn" coords="4 28"/>
					<area xml:id="response.json.url" units="linecolumn" coords="8 92"/>
					<area xml:id="response.json.region" units="linecolumn" coords="9 41"/>
					<area xml:id="response.json.tenant" units="linecolumn" coords="10 45"/>
					<area xml:id="response.json.servicename" units="linecolumn" coords="24 49"/>
					<area xml:id="response.json.servicetype" units="linecolumn" coords="25 34"/>				
					<area xml:id="response.json.token" units="linecolumn" coords="127 19"/>
					<area xml:id="response.json.userdefault" units="linecolumn" coords="132 41"/>
					<area xml:id="response.json.role" units="linecolumn" coords="135 23"/>
				</areaspec>	
				<programlisting language="javascript">
<xi:include href="../samples/auth-annotated.json" parse="text"/>
		</programlisting>
			</programlistingco>			
		</example>
		<calloutlist>
			<callout arearefs="response.json.catalog">
				<para> The service catalog lists the services this user can
					access. In this example, the user can access two
					compute services (Cloud Servers OpenStack and
					Cloud Servers) and two object storage services
					(Cloud Files Content Distribution Network (CDN),
					and Cloud Files), as well as one database service, one DNS service, one load balancing service,
					and one monitoring service.
					The catalog listing for each
					service provides at least one endpoint URL for
					that service. Other information, such as regions
					and versions and tenants, is provided if it's
					relevant to this user's access to this service. </para>
				<para> </para>
			</callout>
			<callout arearefs="response.json.url">
				<para>
					An endpoint can be assigned public and internal URLs. A
					public URL is accessible from anywhere. Access to a public
					URL usually incurs traffic charges. Internal URLs are only
					accessible to services within the same region. Access to
					an internal URL is free of charge.
				</para>
				<para> </para>
			</callout>
			<callout arearefs="response.json.region">
				<para> A service may expose endpoints in different regions.
					Regional endpoints allow clients to provision
					resources in a manner that provides high
					availability.  </para>
				<para> Some services are not region-specific. These services supply a single
					non-regional endpoint and do not provide access to internal URLs. </para>
				<para> </para>
			</callout>
			<callout arearefs="response.json.tenant">
				<para> Some services recognize specification of a tenant. If a
					service does recognize tenants, the format of the
					tenant specification is defined only by the
					service; for details about whether and how to
					specify a tenant, check the documentation for the
					service you are using.</para>
				<para> </para>
			</callout>
			<callout arearefs="response.json.servicename">
				<para> 
					The service name attribute identifies each unique service in the catalog.
					Once a service is created, its name does not change. However, new services of the same service type may be added to the catalog with new names.
				</para>
				<important>
					<para> If you are programmatically parsing an authentication
						response, use service type rather than service name as
						the basis for determining whether a user has access to
						a particular kind of service. Service type is stable
						across all releases; new service types may be developed,
						but existing service types are not renamed.
						In this example,
						<code>type="compute"</code> identifies all the
						available compute services, one of which is named
						cloudServers and one of which is named
						cloudServersOpenStack. New compute service names may be added 
						in future releases; whatever the compute services are
						named, you can always
						recognize them by parsing for
						<code>type="compute"</code> in the authentication
						response's service catalog. </para>
				</important>
				<para> </para>
			</callout>
			<callout arearefs="response.json.servicetype">
				<para> 
					The service type attribute identifies services that perform similar functions, whatever those services might be named. 
					In this example, the services named cloudServers and cloudServersOpenstack are both identified as <code>type="compute"</code>, 
					identifying them as compute services even though the word "compute" does not appear in their names.
				</para>
				<important>
					<para>Use service type as the primary value for
						locating a service. If multiple endpoints of the
						same service type exist in the same region, use
						service name as the tiebreaker.</para>
				</important>
				<para> </para>
			</callout>
			<callout arearefs="response.json.token">
				<para> This token can be presented to a service as evidence of authentication.
					Tokens are valid for a finite duration; a token's default lifespan is twenty-four hours. 
				</para>
				<para> The token's <code>expires</code> attribute denotes the time
					after which the token will automatically become
					invalid. A token may be manually revoked before
					the time identified by the <code>expires</code>
					attribute; <code>expires</code> predicts a token's
					maximum possible lifespan but does not guarantee
					that it will reach that lifespan. Clients are
					encouraged to cache a token until it expires. </para>
				<para> </para>
			</callout>
			<callout arearefs="response.json.role">
				<para> 
					Users can be assigned multiple roles, with each role providing specific privileges.
					In this example, <code>joeuser</code> is the administrative user for the account,
					holding the fully-privileged <code>identity:user-admin</code> role.
					Other users might hold other roles with different privileges.
					Roles need not be associated with actual job functions such as Administrator, Operator, Developer, Tester, or Trainer.
				</para>
				<para> </para>
			</callout>
			<callout arearefs="response.xml.userdefault">
				<para> 
					Users can be assigned a default region so that, when there is a choice between multiple endpoints associated with a 
					service in the user's catalog, the endpoint for the user's default region will be selected if it is available.
					In this example, the user's default region is <code>DFW</code> and several of the services in the user's catalog offer endpoints in that region and the 
					<code>ORD</code> region; this user's work will be directed to the <code>DFW</code> region whenever possible.
				</para>
				<para> </para>
			</callout>
		</calloutlist>
		<section xml:id="Service_Types-d1e265">
			<title>Service Types in the Service Catalog</title>
			<para> As shown in <xref
					linkend="Sample_Request_Response-d1e64"/>, every
				service listed in the service catalog is associated
				with a service type. You can use the service type to
				recognize services that perform similar functions,
				whatever those services are named. The following table
				shows all the available service types and relates them
				to their corresponding OpenStack projects and those
				projects' documentation. </para>
			<table rules="all">
				<caption>Service Types</caption>
				<col width="24%"/>
				<col width="76%"/>
				<thead>
					<tr>
						<th>Service Type</th>
						<th>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td><code>compute</code></td>
						<td>
							<para> Services of this type are
								compatible with the OpenStack Compute
								(Nova) API 1.1 as documented at <link
								xlink:href="http://nova.openstack.org/"
								>http://nova.openstack.org/</link>. </para>
							<para>
								<emphasis role="italic">Cloud Servers,
								a Rackspace service of this type,
								is documented at <link
								xlink:href="http://docs.rackspace.com/api/"
								>http://docs.rackspace.com/api/</link>.</emphasis>
							</para>
						</td>
					</tr>
					<tr>
						<td><code>identity</code></td>
						<td>
							<para> Services of this type are
								compatible with the OpenStack Keystone
								API 2.0 as documented at <link
								xlink:href="http://keystone.openstack.org/"
								>http://keystone.openstack.org/</link>. </para>
							<para>
								<emphasis role="italic">Cloud
								Identity, a Rackspace service of
								this type, is documented at <link
								xlink:href="http://docs.rackspace.com/api/"
								>http://docs.rackspace.com/api/</link>.</emphasis>
							</para>
						</td>
					</tr>
					<tr>
						<td><code>image-service</code></td>
						<td>
							<para> Services of this type are
								compatible with the OpenStack Glance
								API as documented at <link
								xlink:href="http://glance.openstack.org/"
								>http://glance.openstack.org/</link>. </para>
						</td>
					</tr>
					<tr>
						<td><code>object-store</code></td>
						<td>
							<para> Services of this type are
								compatible with the OpenStack Swift
								API as documented at <link
								xlink:href="http://swift.openstack.org/"
								>http://swift.openstack.org/</link>. </para>
							<para>
								<emphasis role="italic">Cloud Files, a
								Rackspace service of this type, is
								documented at <link
								xlink:href="http://docs.rackspace.com/api/"
								>http://docs.rackspace.com/api/</link>.</emphasis>
							</para>
						</td>
					</tr>
					<tr>
						<td><code>rax:database</code></td>
						<td>
							<para>
								<emphasis role="italic">Cloud Databases, a Rackspace service 
									of this type, is
									documented at <link
										xlink:href="http://docs.rackspace.com/api/"
										>http://docs.rackspace.com/api/</link>.</emphasis>
							</para>
						</td>
					</tr>
					<tr>
						<td><code>rax:dns</code></td>
						<td>
							<para>
								<emphasis role="italic">Cloud DNS, a
									Rackspace service of this type, is
									documented at <link
										xlink:href="http://docs.rackspace.com/api/"
										>http://docs.rackspace.com/api/</link>.</emphasis>
							</para>
						</td>
					</tr>
					<tr>
						<td><code>rax:load-balancer</code></td>
						<td>
							<para>
								<emphasis role="italic">Cloud Load
								Balancers, a Rackspace service of
								this type, is documented at <link
								xlink:href="http://docs.rackspace.com/api/"
								>http://docs.rackspace.com/api/</link>.</emphasis>
							</para>
						</td>
					</tr>
					<tr>
						<td><code>rax:monitor</code></td>
						<td>
							<para>
								<emphasis role="italic">Cloud
									Monitoring, a Rackspace service of
									this type, is documented at <link
										xlink:href="http://docs.rackspace.com/api/"
										>http://docs.rackspace.com/api/</link>.</emphasis>
							</para>
						</td>
					</tr>
					<tr>
						<td><code>rax:object-cdn</code></td>
						<td>
							<para>
								<emphasis role="italic">Cloud Files, a
								Rackspace service that supports a
								Content Distribution Network (CDN),
								is documented at <link xlink:href="http://docs.rackspace.com/api/">http://docs.rackspace.com/api/</link>.</emphasis>
							</para>
						</td>
					</tr>
				</tbody>
			</table>
		</section>
		<section xml:id="Sample_Catalog_Workflow-d1e266">
			<title>Suggested Work flow for Processing a Service Catalog Response</title>
			<para> When your client issues a successful authentication request,
				the Cloud Identity Service responds with a catalog
				showing the services available to that client, with
				one endpoint listed for each available service; you
				can find an annotated example of such a response in
					<xref linkend="Sample_Request_Response-d1e64"/>. </para>
			<para> As the client developer, you must decide how your client
				should use the contents of its service catalog. The
				first step may be to identify a service to which your
				client should be connected. Here is one possible
				work flow for processing the service catalog response
				to identify available services and their endpoints: </para>
			<orderedlist>
			<listitem>
					<para> 
						If the service catalog lists only one endpoint, use it.
						This will connect your client to the only
						service available to that client.
					</para>
				</listitem>
				<listitem>
					<para> 
						If the service catalog lists multiple endpoints,
						you must establish a process for choosing an endpoint to connect your client to:
					</para>
					<orderedlist numeration="loweralpha">
						<listitem>
							<para> If the user has not specified which endpoint to use,
								generate an error. </para>
						</listitem>
						<listitem>
							<para> If the user has specified which endpoint to use, help
								the user identify that endpoint from
								within the catalog: </para>
							<orderedlist numeration="lowerroman">
								<listitem>
									<para>
										Support filtering by 
										endpoint name, service name, service type, region name, and version.
									</para>
								</listitem>
								<listitem>
									<para>
										Support manual specification of an endpoint via a URL parameter. 
									</para>
								</listitem>
							</orderedlist>
						</listitem>
					</orderedlist>
				</listitem>
			</orderedlist>
					<para> Authentication endpoints follow the process described
				above. </para>
			<para>
				To connect a client to an endpoint listed as
					<code>type="compute"</code>, do the following: 
			</para>
				<orderedlist>
					<listitem>
						<para>
							Go that compute service's endpoint and use its <code>WWW-Authenticate</code>
							header to determine what authentication server it uses.
						</para>
					</listitem>
					<listitem>
						<para>
							Go to that authentication server and authenticate.
						</para>
					</listitem>
					<listitem>
						<para>
							Return to the compute endpoint and proceed with using the compute service.
						</para>
					</listitem>
				</orderedlist>
		</section>
	</section>
	<section xml:id="Content_Compression-d1e262">
	  <title>Content Compression</title>
	  <para>Request and response body data may be encoded with gzip
			compression in order to accelerate interactive performance
			of API calls and responses. This is controlled using the
				<code>Accept-Encoding</code> header on the request
			from the client and indicated by the
				<code>Content-Encoding</code> header in the server
			response. By default, encoding is disabled.</para>
	  <table rules="all">
		<caption>Compression Headers</caption>
		<thead>
		  <tr>
			<td>Header Type</td>
			<td>Name</td>
			<td>Value</td>
		  </tr>
		</thead>
		<tbody>
		  <tr>
			<td>HTTP/1.1 Request</td>
		  	<td><code>Accept-Encoding</code></td>
			<td>gzip</td>
		  </tr>
		  <tr>
			<td>HTTP/1.1 Response</td>
		  	<td><code>Content-Encoding</code></td>
			<td>gzip</td>
		  </tr>
		</tbody>
	  </table>
	</section>
	<section security="writeronly" xml:id="Paginated_Collections-d1e325">
		<title>Paginated Collections</title>
		<annotation>
			<remark>"Paginated Collections" is not yet implemented as of v2.0;
				hide it for now and reveal it when the feature is working." </remark>
		</annotation>
		<para> To reduce load on the service, list operations will return a
			maximum number of items at a time. The maximum number of
			items returned is determined by the Identity provider. To
			navigate the collection, the parameters
				<parameter>limit</parameter> and
				<parameter>marker</parameter> can be set in the URI
				(e.g.?<parameter>limit</parameter>=100&amp;<parameter>marker</parameter>=1234).
			The <parameter>marker</parameter> parameter is the ID of
			the last item in the previous list. Items are sorted by
			update time; when an update time is not available, they
			are sorted by ID. The <parameter>limit</parameter>
			parameter sets the page size. Both the
				<parameter>limit</parameter> and
				<parameter>marker</parameter> parameters are optional.
			If the client requests a <parameter>limit</parameter>
			beyond that which is supported by the deployment, an
			<literal>overLimit</literal> (<errorcode>413</errorcode>) fault may be
			thrown. A <parameter>marker</parameter> with an invalid ID
			will return an <literal>itemNotFound</literal> (<errorcode>404</errorcode>)
			fault. </para>
		<note>
			<para>
				Paginated collections never return <code>itemNotFound</code> (<errorcode>404</errorcode>) faults when the
				collection is empty; clients should be prepared to
				handle an empty collection.</para>
		</note>
		<para>Paginated collections contain "next" and "previous"
			Atom links. The first page in the list will not contain a
			"previous" link; similarly, the last page in the list will
			not contain a "next" link. 
		</para>
		<para>
			In the following examples, a paginated collection of tenants
			is returned as three linked pages. 
			The
			first page is retrieved via a &GET; to
			<code>http://identity.api.openstack.org/v2.0/1234/tenants?limit=1</code>;
			the second page is retrieved by following the "next" link from the first page;
			the third page is retrieved by following the "next" link from the second page.
		</para>	
		<para>	
			The <parameter>limit</parameter>
			parameter sets the page size;
			<parameter>limit=1</parameter> returns one item on the first page. Subsequent
			"next" and "previous" links honor the initial page
			size. Thus, a client may follow links to traverse a
			paginated collection without having to input the
				<parameter>marker</parameter> parameter. </para>
		<example>
			<title>Tenant Collection, First Page: XML</title>
			<programlisting language="xml">
<xi:include href="../samples/tenants-1.xml" parse="text"/>
			</programlisting>
		</example>
		<example>
			<title>Tenant Collection, First Page: JSON</title>
			<programlisting language="javascript"><xi:include
			href="../samples/tenants-1.json" parse="text"/></programlisting>
		</example>
		<example>
			<title>Tenant Collection, Second Page: XML</title>
			<programlisting language="xml">
<xi:include href="../samples/tenants-2.xml" parse="text"/>
			</programlisting>
		</example>
		<example>
			<title>Tenant Collection, Second Page: JSON</title>
			<programlisting language="javascript"><xi:include
			href="../samples/tenants-2.json" parse="text"/></programlisting>
		</example>
		<example>
			<title>Tenant Collection, Last Page: XML</title>
			<programlisting language="xml">
<xi:include href="../samples/tenants-3.xml" parse="text"/>
			</programlisting>
		</example>
		<example>
			<title>Tenant Collection, Last Page: JSON</title>
			<programlisting language="javascript"><xi:include
			href="../samples/tenants-3.json" parse="text"/></programlisting>
		</example>
		<para>
			In the JSON representation, paginated collections contain
			a <property>values</property> property that contains the
			items in the collections.  Links are accessed via the
			<property>links</property> property. This approach allows
			for extensibility of both the collection members and of
			the paginated collection itself. It also allows
			collections to be embedded in other objects as shown in the example 
			below. Here, a subset of groups is presented within a
			user. To continue retrieving 
			additional groups belonging to a user, a client must follow the "next" link.
		</para>
		<example>
			<title>Paginated Roles in a User: XML</title>
			<programlisting language="xml">
<xi:include href="../samples/getuser-1.xml" parse="text"/>
			</programlisting>
		</example>
		<example>
			<title>Paginated Roles in a User: JSON</title>
			<programlisting language="javascript"><xi:include
			href="../samples/getuser-1.json" parse="text"/></programlisting>
		</example>
	</section>
	<section xml:id="Versions-d1e472">
		<title>Contract versions</title>
		<para>The contract version denotes the data model and behavior that the API supports.
			The identity API uses a URI version scheme.</para>
		<important>
			<para>The Rackspace implementation of the OpenStack Keystone Identity
				Service v2.0 does not
				yet support MIME-type version. </para>
		</important>
		<para>
			The first element of
			the URI path contains the target version identifier: for example, in 
			&ENDPOINT-US;&hellip;, the API version is 2.0. Other than requests to query for version, 
			all requests must contain a target version. 
		</para>
	    <para>
			Any features or functionality
			changes that would necessitate a break in API compatibility will require a new
			version, which will result in the URI version being updated accordingly. When new
			API versions are released, older versions will be marked as <code>DEPRECATED</code>.
			Rackspace will work with developers and partners to ensure that there is adequate time to
			migrate to the new version before deprecated versions are discontinued. </para>
		<para security="writeronly">
			The authentication service API uses two version schemes, one based on the URI 
			and the other based on MIME type.
			<annotation>
				<remark>MIME-type version support has not been implemented in v2.0;
					meanwhile, using URI-only text borrowed from Auth
					1.1. </remark>
			</annotation>
			<itemizedlist>
				<listitem>
					<para>			
						In the URI version scheme, the first
						element of the path contains the target version
						identifier. For example, in <code>https://identity.api.openstack.org/
						v2.0/&hellip;</code>, the target version is identified as <code>v2.0</code>. 
					</para>
				</listitem>	
				<listitem>
					<para>
						The MIME-type version scheme uses
						HTTP content negotiation where the <code>Accept</code>
						or <code>Content-Type</code> header contains a MIME
						type that includes the version ID as a parameter.
						For example, in <code>
						application/vnd.openstack.identity+xml;version=1.1</code>, 
						the target version is identified as <code>1.1</code>. 
						A version MIME type is always linked to a base MIME type
						such as <code>application/xml</code> or <code>application/json</code>. 
					</para>
				</listitem>
			</itemizedlist>
			If conflicting
			versions are specified using both a MIME type and a
			URI, the URI takes precedence.
		</para>
		<example security="writeronly">
			<title>Request with MIME-Type version scheme</title>
			<literallayout class="monospaced">
GET /tenants HTTP/1.1
Host: identity.api.rackspacecloud.com
Accept: application/vnd.openstack.identity+xml;version=1.1
X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
			</literallayout>
		</example>
		<example>
			<title>Request with URI version scheme</title>
			<literallayout class="monospaced">
GET /v2.0/tenants HTTP/1.1
Host: identity.api.rackspacecloud.com
Accept: application/xml
X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
			</literallayout>
		</example>
		<note security="writeronly">
			<para>
				The MIME-type version approach supports the
				creation of permanent links, because the version
				scheme is not specified in the URI path. For example, 
				<code>https://api.identity.openstack.org/tenants/12234</code>
				identifies a list of tenants associated with <code>12234</code> but does not identify a version.
			</para>
		</note>
		<para security="writeronly">
			If a request is made with no version specified, then a multiple-choices
			response (<returnvalue>300</returnvalue>) will follow,
			providing links and MIME types for available versions.
		</para>
		<example security="writeronly">
			<title>Multiple Choices Response: XML</title>
			<programlisting language="xml">
<xi:include href="../samples/choices.xml" parse="text"/>
			</programlisting>
		</example>
		<example security="writeronly">
			<title>Multiple Choices Response: JSON</title>
			<programlisting language="javascript"><xi:include href="../samples/choices.json" parse="text"/></programlisting>
		</example>
		<para>Features or functionality changes that would disrupt API
			compatibility will require a new version, which will
			result in the URI version being updated accordingly. When
			new API versions are released, older versions will be
			marked as <code>DEPRECATED</code>. Providers should work
			with developers and partners to ensure there is adequate
			time to migrate to the new version before deprecated
			versions are discontinued. <itemizedlist>
				<listitem>
					<para> New features and functionality that do not
						break API compatibility will be introduced in
						the current version of the API as <link
							linkend="Extensions-d1e688"
							>extensions</link> and the URI will remain
						unchanged. </para>
				</listitem>
				<listitem>
					<para>Features or functionality changes that would
						disrupt API compatibility will require a new
						version, which will result in the URI version
						being updated accordingly. </para>
				</listitem>
				<listitem>
					<para>When new API versions are released, older
						versions will be marked as
							<code>DEPRECATED</code>. </para>
				</listitem>
			</itemizedlist></para>
		<para>
			You can programmatically determine
			available API versions by performing a &GET; on the
			root URL returned from the
			authentication system. In the root URL, the version and everything to the
			right of it is truncated.
			An Atom
			representation of the version's resources is supported
			when issuing a request with the <code>Accept</code>
			header containing <code>application/atom+xml</code> or by adding 
			<code>.atom</code> to the request URI.  This allows standard Atom
			clients to track version changes.
		</para>
		<example>
			<title>Versions List Request</title>
			<literallayout class="monospaced">
GET HTTP/1.1
Host: identity.api.rackspacecloud.com
			</literallayout>
		</example>
		<simpara>&CODES; <returnvalue>200</returnvalue>, <returnvalue>203</returnvalue></simpara>
		<simpara>&ERROR_CODES; badRequest
		(<errorcode>400</errorcode>), identityFault
		(<errorcode>500</errorcode>),
		serviceUnavailable(<errorcode>503</errorcode>)</simpara>
		&NO_REQUEST;
		<example>
			<title>Versions List Response: XML</title>
			<programlisting language="xml">
<xi:include href="../samples/versions.xml" parse="text"/>
			</programlisting>
		</example>
		<example>
			<title>Versions List Response: Atom</title>
			<programlisting language="xml">
<xi:include href="../samples/versions-atom.xml" parse="text"/>
			</programlisting>
		</example>
		<example>
			<title>Versions List Response: JSON</title>
			<programlisting language="javascript"><xi:include href="../samples/versions.json" parse="text"/></programlisting>
		</example>
		<para>You can obtain additional detailed information about a specific version by performing a
			&GET; on the base version URL. For example,
				<code>https://identity.api.rackspacecloud.com/v2.0/</code> is a base version URL, in
			which <code>v2.0</code> is the initial version of the API. All version request URLs end
			with a trailing slash (/). If the slash is omitted, the server might respond with a
				<returnvalue>302</returnvalue> redirection request. You can add format extensions
			after the trailing slash. For example, <code> &ENDPOINT-US;.xml</code> includes
				<code>.xml</code> as a format extension. Note that this is a special case that does
			not hold true for other API requests. In general, requests such as
				<code>/tenants.xml</code> and <code>/tenants/.xml</code> are handled equivalently. </para>
		<example>
			<title>Version Details Request</title>
			<literallayout class="monospaced">
GET HTTP/1.1
Host: identity.api.rackspacecloud.com/v1.0/
			</literallayout>
		</example>
		<simpara>&CODES; <returnvalue>200</returnvalue>, <returnvalue>203</returnvalue></simpara>
		<simpara>&ERROR_CODES; badRequest
		(<errorcode>400</errorcode>), identityFault
		(<errorcode>500</errorcode>),
		serviceUnavailable(<errorcode>503</errorcode>)</simpara>
		&NO_REQUEST;
		<example>
			<title>Version Details Response: XML</title>
			<programlisting language="xml">
<xi:include href="../samples/version.xml" parse="text"/>
			</programlisting>
		</example>
		<example>
			<title>Version Details Response: Atom</title>
			<programlisting language="xml">
<xi:include href="../samples/version-atom.xml" parse="text"/>
			</programlisting>
		</example>
		<example>
			<title>Version details response: JSON</title>
			<programlisting language="javascript"><xi:include href="../samples/version.json" parse="text"/></programlisting>
		</example>
		<para>
			The detailed version response contains pointers to
			both a human-readable and a machine-processable
			description of the API service. The machine-processable description is written in the Web
			Application Description Language (WADL).
		</para>
		<note>
			<para>If there is a discrepancy between the two specifications, the WADL is
			authoritative as it contains the most accurate and up-to-date description of the
			API service. </para>
		</note>
	</section>
	<section xml:id="Extensions-d1e688">
		<title>Extensions</title>
		<para>The authentication service API is extensible, meaning that the API is structured so
			that some functions are implemented in the core API and others are implemented via
			optional extensions to that core. Extensions serve two purposes:<itemizedlist>
				<listitem>
					<para> Extensions allow the introduction of new features in the API without
						requiring a version change.</para>
				</listitem>
				<listitem>
					<para> Extensions allow the introduction of vendor-specific niche functionality.
					</para>
				</listitem>
			</itemizedlist>Every service provider can choose API extensions to the core API based on
			service requirements. Applications can programmiatically determine what extensions are
			available by submitting a GET extensions URI query for the service endpoint URI. Note
			that this is a version-specific request; that is, an extension available in one API version may
			not be available in another, so a response is only applicable to a specific version. </para>
		<para>Each extension has two unique identifiers: a <property>namespace</property> and an
				<property>alias</property>. You can use these identifiers to associate an extension
			with its vendor; in the examples in this section, aliases prefixed <code>RAX-</code>
			indicate that Rackspace provided these extensions. Additionally, an extension contains
			links to documentation in multiple formats. </para>
		<example>
			<title>Extensions Response: XML</title>
			<programlisting language="xml">
			<xi:include href="../samples/extensions.xml" parse="text"/>
			</programlisting>
		</example>
		<example>
			<title>Extensions Response: JSON</title>
			<programlisting language="javascript"><xi:include href="../samples/extensions.json" parse="text"/></programlisting>
		</example>
		<para> Extensions may also be queried individually by their unique alias. This provides the
			simplest method of checking whether an extension is available. An unavailable extension
			will issue an <code>itemNotFound</code> (<errorcode>404</errorcode>) response. </para>
		<informaltable rules="all">
			<thead>
				<tr>
					<td colspan="1">Verb</td>
					<td colspan="2">URI</td>
					<td colspan="3">Description</td>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td colspan="1">&GET;</td>
					<td colspan="2">/extensions/<parameter>alias</parameter></td>
					<td colspan="3">Return details of a single extension</td>
				</tr>
			</tbody>
		</informaltable>
		<simpara>&CODES; <returnvalue>200</returnvalue>, <returnvalue>203</returnvalue></simpara>
		<simpara>&ERROR_CODES; itemNotFound (<errorcode>404</errorcode>), badRequest
				(<errorcode>400</errorcode>), identityFault (<errorcode>500</errorcode>),
				serviceUnavailable(<errorcode>503</errorcode>)</simpara>
		&NO_REQUEST;
		<example>
			<title>Extension Response: XML</title>
			<programlisting language="xml">
<xi:include href="../samples/extension.xml" parse="text"/>
			</programlisting>
		</example>
		<example>
			<title>Extension Response: JSON</title>
			<programlisting language="javascript"><xi:include href="../samples/extension.json" parse="text"/></programlisting>
		</example>
		<para> Extensions may define new data types, parameters, actions, headers, states, and
			resources. In XML, additional elements and attributes may be defined. These elements
			must be defined in the extension's namespace. In JSON, the alias must be used. The
			volumes element in the <xref linkend="UserEXT" xrefstyle="template: Examples %n"/> and
				<xref linkend="UserEXTJ" xrefstyle="select: labelnumber"/> is defined in the
				<code>RAX-META</code> namespace. Extended headers are always prefixed with
				<code>X-</code> followed by the alias and a dash: (<code>X-RAX-META-HEADER1</code>).
			Parameters must be prefixed with the extension alias followed by a colon. </para>
		<important>
			<para> Applications should be prepared to ignore response data that contains extension
				elements. Also, applications should verify that an extension is available before
				submitting an extended request. </para>
		</important>
		<example xml:id="UserEXT">
			<title>Extended User Response: XML</title>
			<programlisting language="xml">
<xi:include href="../samples/ext-getuser.xml" parse="text"/>
			</programlisting>
		</example>
		<example xml:id="UserEXTJ">
			<title>Extended User Response: JSON</title>
			<programlisting language="javascript"><xi:include href="../samples/ext-getuser.json" parse="text"/></programlisting>
		</example>
	</section>
	<section xml:id="Namespaces-d1e910">
		<title>Namespaces</title>
		<para> The API operations described in <olink
				targetdoc="Identity-Admin-Developer-Guide"
				targetptr="API_Operations">API Operations for Service
				Developers</olink> are enabled by a combination of the
			core Identity API and multiple API extensions. You can
			read more about extensions, including how to request
			details about all or specific extensions, at <xref
				linkend="Extensions-d1e688"/>. </para>
		<para> 
			Depending upon which operations you perform, you may see
			evidence of one or several extensions involved in
			processing your request. The most obvious evidence is the
			inclusion of namespaces in XML responses; you can identify
			the extensions involved in processing a request by
			examining the namespaces shown in the response. 
		</para>
		<para>
			A
			namespace is a container within which information has a
			specific meaning; in a different container, the meaning
			might be different. 
			Specifying a namespace as the source of a definition is widely used as a way of choosing among multiple available meanings;  
			context and scope are closely-related ideas.
		</para>
		<para>
			In the example below, 
			<code>xmlns</code> associates each namespace label (such as <code>ns1</code>) 
			with a URL (such as <code>http://docs.openstack.org/identity/api/ext/OS-KSADM/v1.0</code>).
			Examining the list of namespaces shows that the core Identity API makes it possible to list
				<code>credentials</code> and the
				<code>RAX-KSKEY</code> extension adds to that by
			making it possible to list a specific kind of credentials,
				<code>apiKeyCredentials</code>.
		</para>
		<example>
			<title>Multiple Namespaces in an XML Response</title>
			<programlistingco>
				<areaspec>
					<area xml:id="namespace.xml.credentials" units="linecolumn" coords="3 17"/>
					<area xml:id="namespace.xml.rax-kskey" units="linecolumn" coords="6 85"/>
					<area xml:id="namespace.xml.apikey" units="linecolumn" coords="12 27"/>
				</areaspec>	
				<programlisting language="xml">
<xi:include href="../samples/namespace-demo.xml" parse="text"/>
</programlisting>
			</programlistingco>			
		</example>
		<calloutlist>
			<callout arearefs="namespace.xml.credentials">
				<para> The core Identity API, defined in <code>ns2</code>, supports <code>&lt;credentials&gt;</code>.
						<emphasis role="italic">This association is valid only within this example; you may see
						namespaces identified differently in responses that you generate.</emphasis>
				</para>
				<para> </para>
			</callout>
			<callout arearefs="namespace.xml.rax-kskey">
				<para> The <code>RAX-KSKEY</code> extension is defined in <code>ns3</code>. <emphasis role="italic">This
						association is valid only within this example; you may see namespaces identified differently
						in responses that you generate.</emphasis>
				</para>
				<para> </para>
			</callout>
			<callout arearefs="namespace.xml.apikey">
				<para> Support for <code>&lt;apiKeyCredentials&gt;</code> is provided by the extension defined as
						<code>ns3</code>. <emphasis role="italic">This association is valid only within this example;
						you may see namespaces identified differently in responses that you generate.</emphasis>
				</para>
				<para> </para>
			</callout>
		</calloutlist>
		<para> If you are programmatically parsing responses that describe multiple namespaces, you should not assume that the
			prefixes that identify namespaces are constant. In this example, <code>ns2</code> identifies the namespace for the
			Identity API and <code>ns3</code> identifies the namespace for the <code>RAX-KSKEY</code> extension; under other
			circumstances, other prefixes could be associated with those namespaces. </para>
	</section>
	<section xml:id="Account-Users-d1e910">
		<title>Identity user types and default roles</title>
		
		<para>In the &CLOUD;, users are represented as accounts created for specific individuals.
			Typically, a user has a password and email associated with the account. When a user is
			created, the &CIS; automatically assigns a user type and a default role to the account,
			based on the default &CIS; system configuration. The role defines access rights and
			permissions for the &CIS; and other &CLOUD; services as shown <link
				linkend="Identity_tbl_usr"/>
		</para>
		<table xml:id="Identity_tbl_usr " rules="all" width="958">
			<caption>&CIS; Accounts: User types and default role assignments</caption>
			<col width="15%"/>
			<col width="17%"/>
			<col width="686pt"/>
			<thead>
				<tr>
					<th>
						<para>User type</para>
					</th>
					<th>
						<para>Default role assignment</para>
					</th>
					<th>
						<para>Description</para>
					</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>
						<para>Service administrator</para>
					</td>
					<td>
						<para>identity:service-admin</para>
					</td>
					<td>
						<para>The Service administrator user type is reserved for the &CIS; operations team members.
							Service administrators hold the
								<literal>identity:service-admin</literal> role that provides full
							administrative rights and privileges to manage the Identity service. </para>
						<para>Service developers that want to update an existing &CLOUD; service or add a new one work
							together with the &CIS; Operations team to create an endpoint template
							and add the service to the Service catalog. </para>
					</td>
				</tr>
				<tr>
					<td>
						<para>Administrator</para>
					</td>
					<td>
						<para>identity:admin</para>
					</td>
					<td>
						<para>The Administrator user type is reserved for &CLOUD; services that
							require access to the &CIS; to validate tokens and retrieve user
							information.</para>
					</td>
				</tr>
				<tr>
					<td>
						<para>User Administrator</para>
						<para>(Account owner)</para>
					</td>
					<td>
						<para>identity-user-admin</para>
					</td>
					<td>
						<para>When a &CLOUD; customer account is created, it is associated with one
							user, the User administrator.</para>
						<para>The &CIS; automatically assigns the <literal>identity:user-admin</literal> role to the
							account, giving the User Administrator full administrative privileges to
							manage the customer account. Exactly one administrative user exists for
							each account. The User Administrator account user is also referred to
							as the Account Owner.</para>
					</td>
				</tr>
				<tr>
					<td>
						<para>Account User</para>
						<para>(sub-user)</para>
					</td>
					<td>
						<para>identity:default</para>
					</td>
					<td>
						<para>Account users, sometimes called sub-users, are created and managed by
							User administrators. An account user has these characteristics:</para>
						<itemizedlist>
							<listitem>
								<para>Their account is a child of the User Administrator
									account.</para>
							</listitem>
							<listitem>
								<para>Hold the <literal>identity:default</literal> role, with the associated rights and
									privileges.</para>
							</listitem>
							<listitem>
								<para>Share the tenant information, group memberships, and endpoints
									from the parent User Administrator account.</para>
							</listitem>
							<listitem>
								<para>New user accounts inherit </para>
							</listitem>
						</itemizedlist>
						<para>The <literal>identity:default</literal> role only provides rights and privileges to
							manage the user's own account. For example, account users can update
							user information and passwords on their own accounts, but they cannot
							update information on other accounts. An account user can submit a List
							users request, but the response only returns information about the
							account owner. </para>
						<para>Administrators can directly assign sub-users to a particular tenant so
							that the users behave as if they are contained within that tenant
						</para>
					</td>
				</tr>
				<tr>
					<td>User Manager</td>
					<td>identity:user-manage</td>
					<td><para>The User manager is a customer-based user type designated as the administrator for the &CLOUD;
							account along with the User administrator. User and Service
							administrators can update an existing or new sub-user account to change
							it to a User Manager account.  create a User Manger account by account
							to change the role from <literal>identity:default</literal> to
								<literal>identity:user-manage</literal>.</para>
						<para>User Manager accounts hold the <literal>user-admin</literal> role by default, with the
							same access rights and privileges as the User administrator.</para></td>
				</tr>
			</tbody>
		</table>
		<para><?oxy_comment_start author="marg7175" timestamp="20140612T001831-0500" comment="Does the section about valid authentication credentials require update?"?>All<?oxy_comment_end?>
			users, including account users, can authenticate with a combination of their user name
			and password. Only administrative users can authenticate either with a combination of
			their user name and API key or with a combination of their tenant ID and API key.</para>
			<note>
				<para>When managing &amp;CIS; accounts for the User Administrator, keep the following points in
				mind to prevent unexpected changes to the sub-user accounts associated with the User
				Administrator account. <itemizedlist>
					<listitem>
						<para> When a new account user is created, it inherits its parent's groups.
						</para>
					</listitem>
					<listitem>
						<para> When a parent is assigned to a new group, its account users inherit
							that group. </para>
					</listitem>
					<listitem>
						<para> When a parent is removed from a group, its account users are removed,
							too. </para>
					</listitem>
					<listitem>
						<para> When a service attempts to assign an account user to a group, that
							attempt fails. A <errorcode>400</errorcode> error is returned, with the
							following message: "Cannot add sub-users directly to a group, must
							assign their parent user." To assign an account user to a group, assign
							its parent to that group; the account user will inherit the new group
							assignment from its parent. </para>
					</listitem>
					<listitem>
						<para>Administrators can directly assign Account users to a particular
							tenant so that the users behave as if they are contained within that
							tenant.</para>
					</listitem>
				</itemizedlist></para>
			</note> 
	</section>
	<section xml:id="Limits-d1e909">
		<title>Limits</title>
		<para>
			Calls to the Identity API are rate-limited at a default of 50 requests per second. 
			Since tokens have an expiration time of 24 hours, you should never hit this limit.
		</para>
		<para>
			The limit is placed on either the request's IP address, the user name, or the token 
			in the <code>X-Auth-Token</code> header, depending on the data available in the call's request.
			If your request is rejected because you have exceeded your rate limit, you will receive a <errorcode>413</errorcode> <code>overLimit</code> error. 
			While you can retry after a few seconds, 
			we also recommend that you check your client code to verify that it is using the API in an efficient manner.
		</para>
		<para>
			A future release will provide the ability to view your limits so you can track API utilization before being rate-limited.
		</para>
		<para>
			The rate limit defaults are likely to change as we gauge realistic levels.  
			If the default limits change, we'll update this document to reflect the current value.
		</para>
		<tip condition="admin">
			<para> You can learn about rate limiting operations in <olink
					targetdoc="Identity-Admin-Developer-Guide"
					targetptr="Ratelimiting_Calls">“Rate
					Limits”</olink>. </para>
		</tip>
	</section>
	<section xml:id="Faults-d1e908">
		<title>Faults</title>
		<para>
			When an error occurs, the system returns an HTTP error response code denoting the type of error. The system 
			returns additional information about the fault in the body of the response. 
		</para>
		<para>
			The following table lists possible fault types along with their associated error codes. 
		</para>
		<table rules="all">
			<caption>Fault Types</caption>
			<thead>
				<tr>
					<td>Fault Element</td>
					<td>Associated Error Codes</td>
					<td>Expected in All Requests?</td>
				</tr>
			</thead>
			<tbody>
				<tr align="left">
					<td>serviceFault</td>
					<td>500</td>
					<td> YES </td>
				</tr>
				<tr>
					<td>serviceUnavailable</td>
					<td>503</td>
					<td/>
				</tr>
				<tr align="left">
					<td>badRequest</td>
					<td>400</td>
					<td> YES </td>
				</tr>
				<tr align="left">
					<td>unauthorized</td>
					<td>401</td>
					<td> YES </td>
				</tr>
				<tr align="left">
					<td><link linkend="Limits-d1e909"
							>overLimit</link></td>
					<td>413</td>
					<td> YES</td>
				</tr>
				<tr align="left">
					<td>userDisabled</td>
					<td>403</td>
					<td/>
				</tr>
				<tr align="left">
					<td>forbidden</td>
					<td>403</td>
					<td/>
				</tr>
				<tr align="left">
					<td>itemNotFound</td>
					<td>404</td>
					<td/>
				</tr>
				<tr align="left">
					<td>tenantConflict</td>
					<td>409</td>
					<td/>
				</tr>
			</tbody>
		</table>
		<para> The root element of the fault can change depending on the type of error. From an XML schema
			perspective, all API faults are extensions of the base fault type,
				<type>identityFault</type>. When working with a system that binds XML to actual
			classes, use <type>identityFault</type> as a catch-all if there is no interest in
			distinguishing between individual fault types; for example, you might need to do this if
			you are working with JAXB. </para>
  		<para> The error code is returned in the body of the response. The message section returns a
			human-readable message. The details section is optional and may contain useful
			information for tracking down an error. For example, a stack trace might be provided. </para>
  		<para> 
  			The following are examples of an <code>itemNotFound</code> error. 
  		</para>
		<example>
			<title>Item Not Found Fault: XML</title>
			<programlisting language="xml">
				<xi:include href="../samples/item_not_found.xml" parse="text"/>
			</programlisting>
		</example>
		<example>
			<title>Item Not Found Fault: JSON</title>
			<programlisting language="javascript">
				<xi:include href="../samples/item_not_found.json" parse="text"/>
			</programlisting>
		</example>
	</section>
	<section xml:id="Role_Based_Access_Control-d1e808">
		<title>Role Based Access Control</title>
		<para>The Rackspace Cloud Identity service provides Role Based Access Control (RBAC) so that
			customers can restrict access to Cloud services and capabilities to authorized users
			only. RBAC is an opt-in feature available to all Rackspace Cloud customers. The account
			owner user (<literal>identity:user-admin</literal>) can activate RBAC by adding users to
			the account and assigning roles to users via the API, the Cloud Control Panel, or by
			calling Customer support. </para>
		
		<para>
			Rackspace-defined roles provide specific permissions that determine the services a user can
			access and the types of operations they can complete. For example, an account owner can assign 
			an <literal>admin</literal> role to user accounts that require access to create, read, update, and delete 
			capabilities for all API services included in the service catalog for that account. 
		</para>
		
		<para>
			Role assignments can be global or custom. Global roles manage access and permissions across 
			multiple API services. Custom roles manage access and permissions on a per-product basis. 
			For both global and custom roles, the user has access only to designated products. 
			<xref linkend="RBAC_roledesc_table"/> describes the
			RBAC roles available.</para> 
		<table rules="all" width="100%" xml:id="RBAC_roledesc_table">
				<caption>Rackspace Cloud RBAC Roles and Capabilities</caption>
				<thead>
					<tr>
						<th>Role</th>
						<th>Type</th>
						<th>Role Description</th>
						<th>Example Role</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>admin (full access)</td>
						<td>Global</td>
						<td>The admin role provides Create, Read, Update, and Delete permissions
							in all Cloud products, where access is granted. Full access is given
							to current and future products as they become RBAC-enabled. Each
							account can have only one admin </td>
						<td>admin</td>
					</tr>
					<tr>
						<td>observer (read-only access)</td>
						<td>Global</td>
						<td>The observer role provides Read permission in all products where
							access is granted. Read-only access is given to current and future
							products as they become RBAC-enabled.</td>
						<td>observer</td>
					</tr>
					<tr>
						<td>product:admin</td>
						<td>Custom</td>
						<td>The product:admin role provides Create, Read, Update, and Delete
							permissions for a specified product, where access is granted.</td>
						<td>nova:admin</td>
					</tr>
					<tr>
						<td>product:creator</td>
						<td>Custom</td>
						<td>The product:creator role provides Create, Read, and Update
							permissions for a specified product, where access is granted. The
							user cannot delete resources.</td>
						<td>cloudFiles:creator</td>
					</tr>
					<tr>
						<td>product:observer</td>
						<td>Custom</td>
						<td>This product:observer role provides Read permission for a specified
							product, where access is granted.</td>
						<td>cdb:observer</td>
					</tr>
				</tbody>
			</table><important>
				<para xml:id="Account_Owner-dle808">All RBAC roles are subordinate to the account owner user
				(identity:user-admin) designated by the customer as the primary contact. Only an
				account owner can create account users (identity:default) and assign RBAC roles. Account owners 
				cannot hold any additional roles because they already have full access to all services and 
				capabilities.</para>
			</important>
		<section xmlns="http://docbook.org/ns/docbook"
			xmlns:xi="http://www.w3.org/2001/XInclude"
			xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
			xml:id="section_assign_roles_3">
			<title>Assigning Roles to Account Users</title>
			<para>The account owner, <literal>identity:user-admin</literal>) can create account users, 
				<literal>identity:default)</literal> on the account and then assign roles to 
				those users. The roles grant the account users specific permissions for accessing the 
				Cloud services and capabilities. Each account has only one account owner, and that role 
				is assigned by default to any Rackspace Cloud account when the account is created. Account 
				owners cannot hold any additional roles because they already have full access to all services 
				and capabilities.
			</para>
			<para>
				You can assign roles programmatically through the API or by using the Cloud Control panel
				interface.
			</para>
			<para>Use the following API operations to add account users and manage role assignments:</para>
			<itemizedlist condition="client">
				<listitem>
					<para>
						<olink targetdoc="Identity-Developer-Guide" targetptr="POST_addUser_v2.0_users_User_Calls">Add account user</olink>
					</para>
				</listitem>
				<listitem>
					<para><olink targetdoc="Identity-Developer-Guide"
						targetptr="PUT_addUserRole_v2.0_users__userId__roles_OS-KSADM__roleId__Role_Calls"
						>Assign role to account users</olink></para>
				</listitem>
				<listitem>
					<para><olink targetdoc="Identity-Developer-Guide"
						targetptr="DELETE_deleteUserRole_v2.0_users__userId__roles_OS-KSADM__roleId__Role_Calls"
						>Delete role from account user</olink></para>
				</listitem>
			</itemizedlist>
			<itemizedlist condition="admin">
				<listitem>
					<para>
						<olink targetdoc="Identity-Admin-Developer-Guide"
							targetptr="POST_addUser_v2.0_users_User_Calls">Add account user</olink>
					</para>
				</listitem>
				<listitem>
					<para><olink targetdoc="Identity-Admin-Developer-Guide"
						targetptr="PUT_addUserRole_v2.0_users__userId__roles_OS-KSADM__roleId__Role_Calls"
							>Assign role to account users</olink></para>
				</listitem>
				<listitem>
					<para><olink targetdoc="Identity-Admin-Developer-Guide"
						targetptr="DELETE_deleteUserRole_v2.0_users__userId__roles_OS-KSADM__roleId__Role_Calls"
							>Delete role from account user</olink></para>
				</listitem>
			</itemizedlist>
			<para>For information about implementing RBAC by using the Cloud
				Control panel and other RBAC-related topics, see the
				following Rackspace Knowledge Center articles:</para>
			<itemizedlist>
				<listitem>
				<para>
					<link
						xlink:href="http://www.rackspace.com/knowledge_center/article/managing-role-based-access-control-rbac"
						>Managing Role-based access control through Cloud Control panel</link>
				</para>
			</listitem>
				<listitem>
					<para>
						<link
							xlink:href="http://www.rackspace.com/knowledge_center/article/getting-started-with-role-based-access-control-rbac-0">Getting Started with Role-based access control (RBAC)</link>
					</para>
				</listitem></itemizedlist>
		</section>
		<section xml:id="RBAC_Role_Conflict-dle808">
			<title>Resolving Conflicts Between RBAC Multiproduct (Global) vs. Custom (Product) Roles</title>
			<para>The account owner can set roles for both multiproduct and custom (product-specific) scope,
				and it is important to understand how any potential conflicts among these roles are
				resolved. When two roles appear to conflict, the role that provides the more
				extensive permissions takes precedence. Therefore, admin roles take precedence over
				observer roles, because admin roles provide more permissions. </para>
			<para>
				The following table shows two examples of how potential conflicts between user roles in the Control Panel are resolved:
			</para>
			<para>
				<informaltable rules="all">		
					<thead>
						<tr align="center">
							<td>Permission Configuration</td>
							<td>View of Permission in the Control Panel </td>
							<td>Can the User Perform Product Admin Functions in the Control Panel?</td>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td>User is assigned the following roles: multiproduct <emphasis role="bold">observer</emphasis> and product <emphasis
								role="bold">admin</emphasis></td>
							<td>Appears that the user has only the multiproduct <emphasis role="bold">observer</emphasis> role</td>
							<td>Yes, for specified product only. The user has the <emphasis role="bold">observer</emphasis> role for the rest of
								the products.</td>
						</tr>
						<tr>
							<td>User is assigned the following roles: multiproduct <emphasis role="bold">admin</emphasis> and product <emphasis
								role="bold">observer</emphasis></td>
							<td>Appears that the user has only the multiproduct <emphasis role="bold">admin</emphasis> role</td>
							<td>Yes, for all of the products. The specified product <emphasis role="bold">observer</emphasis> role is
								ignored.</td>
						</tr>
					</tbody>
				</informaltable>
			</para><para>For information about using RBAC with specific products, see the <link
					xlink:href="http://docs.rackspace.com/">API Developer Guide</link> for each
				product.</para>
		</section>
	</section>
    </chapter>
