<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
<!ENTITY % common SYSTEM "../../common/common.ent">
%common;
]>
<section xmlns="http://docbook.org/ns/docbook" 
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" 
  xml:id="extended_actions_reqResp">
  
  <title>Extended Responses and Actions</title>
  <?dbhtml stop-chunking?>
  <para>Extensions define new data types, parameters, actions, headers, states, and resources that
    are added to the core OpenStack APIs.
    <important>
      <para>During application development, make sure to code for cases where the application must ignore response data 
        that contains extension elements if the extension is not available. If the application does not support 
        an extension, treat all state information as state <code>UNKNOWN</code>. Applications must also check whether 
        an extension is available before submitting an extended request. Use the 
        <link xlink:href="GET_admin-listExtensions_v2.0_extensions_Extensions_operations.html">List extensions</link> operation to 
        find out which extensions are available in the application environment.
      </para>
    </important></para>
  <section xml:id="extendedJSON">
    <?dbhtml stop-chunking?>
    <title>JSON requests and responses with extensions</title>
    <para>In JSON, use the alias to reference extended resources and attributes. In this Add
      user API request, you see aliased references to the password attribute that is provided
      by the OS-KSADM extension. <example xml:id="IdentityAddUser">
        <title>Extended Action: JSON Request</title>
        <programlisting language="json"><?db-font-size 70%?><xi:include href="../../common/samples/userwithpw.json" parse="text"/></programlisting>
      </example></para>
    <para>The API response shows aliases for  any elements and attributes that are provided
      by extensions. In this example showing a List users response, the <code>defaultRegion</code> and
      <code>domainId</code> are provided by the RAX-AUTH extension.<example xml:id="IdentityLSTUSRJ">
        <title>Extended Server response: JSON</title>
        <programlisting language="json"><?db-font-size 70%?><xi:include href="../../common/samples/extended_listuser.json" parse="text"/></programlisting>
      </example>
    </para>
    <para>
      Extended headers are always prefixed with
      <code>X-</code> followed by the alias and a dash: (<code>X-AUTH-TOKEN</code>). You must prefix states
      and parameters with the extension alias followed by a colon. For example, a user can be in the 
      <code>RAX-AUTH:multiFactorEnabled</code> state.</para>
  </section>
  <section xml:id="extendedXML">
    <title>JSON requests and responses with extensions</title>
    <?dbhtml stop-chunking?>
    <para>In XML, additional elements and attributes are defined in the namespace for the extension.
      To use these elements and attributes in an API request, include the namespace in the API request as shown in this example.
      <example xml:id="IdentityGETRGNX">
        <title>Extended Action: XML Request</title>
        <programlisting language="xml"><?db-font-size 70%?><xi:include href="../../common/samples/Region.xml" parse="text"/></programlisting>
      </example></para>
    <para>The API response includes the namespaces for core API and extensions resources
      available to the API service.<example xml:id="IdentityLSTUSRX">
        <title>Extended &CIS;: XML Response</title>
        <programlisting language="xml"><?db-font-size 70%?><xi:include href="../../common/samples/extended_listuser.xml" parse="text"/></programlisting>
      </example></para>
  </section>
</section>
