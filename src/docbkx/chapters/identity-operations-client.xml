<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section [
<!ENTITY % common SYSTEM "../../common/common.ent">
%common;
]>
<!-- if role="api-reference" on this chapter, generate table of all operations here -->
<chapter 
	xmlns="http://docbook.org/ns/docbook" 
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" 
	xmlns:raxm="http://docs.rackspace.com/api/metadata"
	xml:id="API_Operations" role="api-reference">
	
	<title>API Operations for Client Developers</title>
	<para>
		Some of these operations require only the core authentication service API v2.0 and some require extensions to the API.
		If an extension is required, it is included in The Rackspace implementation of the Keystone Identity Service; 
		issuing the calls as described here uses the API extensions as needed.
	</para>
	
	<!--Versions-->
	
	<section xml:id="Version_operations">
		<title>API Contract Version</title>
		<para>The Rackspace Cloud can support multiple versions of the service API contract. This
			architecture allows service providers to develop, test, and deploy new API versions
			without disrupting service for customers that are using an existing version. You can use
			the Version operations to query the API service endpoint for information about the API
			version support in your cloud environment. </para>
		
		<wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">			
			<wadl:resource href="../../wadl/identity-admin.wadl#versions">
				<wadl:method href="#getVersions-v2"/>
			</wadl:resource>
		
			<!-- Get a specific API version -->
					<wadl:resource href="../../wadl/identity-admin.wadl#version">
						<wadl:method href="#getVersionInfo-v2.0"/>
					</wadl:resource>
			</wadl:resources>
	</section>
	
	<!--Extensions-->
	
	<section xml:id="Extensions_operations">
		<title>Extensions</title>
		<para xml:id="Extensions_ovw">The Rackspace Cloud Identity Service deploys API extensions to add user and administrative features to 
			the core OpenStack Keystone v2.0 API. You can use the Extensions API operations to query the API service 
			endpoint for information about the extensions available for the specified service.</para>
		
		<wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
			
			<!-- List extensions -->
			<wadl:resource href="../../wadl/identity-admin.wadl#extensions">
				<wadl:method href="listExtensions-v2.0"/>
			</wadl:resource>
			
			<!-- Get extensions -->	
			
			<wadl:resource href="../../wadl/identity-admin.wadl#extension">
				<wadl:method href="#getExtension-v2.0"/>
			</wadl:resource>
		</wadl:resources>
	</section>
	
	<!--User operations-->
	
	<section xml:id="User_Calls">
		<title>Users</title>
		<para>The operations described in this section allow clients to manage users.</para>
		<note>
			<para> 
				Some of the functionality described in this section is
				provided by the <code>OS-KSADM</code> and <code>RAX-KSKEY</code> extensions to the
				core Identity API. 
				You can learn more about API extensions at
				<olink condition="client" targetdoc="Identity-Developer-Guide"
					targetptr="Extensions-d1e688">Extensions</olink>.  
			</para>
		</note>
		<para>
			When these requests are issued by an account user, they act only upon that account user. To learn more about account users, see <olink
				targetdoc="Identity-Developer-Guide"
				targetptr="Account-Users-d1e910">“Account
				Users”</olink>. </para>
		<!--- this section comes from 3 WADLs: core identity-admin + extensions OS-KSADM-admin & RAX-KSKEY-admin -->
		<wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
			<wadl:resource
				href="../../wadl/identity-admin.wadl#admin-users">
				<wadl:method href="#admin-addUser"/>
			</wadl:resource>
			<wadl:resource
				href="../../wadl/identity-admin.wadl#admin-userlst">
				<wadl:method href="#admin-listUsers"/>
			</wadl:resource>
			<wadl:resource
				href="../../wadl/identity-admin.wadl#admin-name">
				<wadl:method href="#admin-getUserByName"/>
			</wadl:resource>
			<wadl:resource
				href="../../wadl/identity-admin.wadl#admin-userid">
				<wadl:method href="#admin-getUserById"/>
			</wadl:resource>
		   <wadl:resource href="../../wadl/identity-admin.wadl#admin-userId">
					<wadl:method href="#admin-updateUsers"/>
		   </wadl:resource>
		   	
		   	<wadl:resource
		   		href="../../wadl/identity-admin.wadl#admin-userId">
		   		<wadl:method href="#admin-deleteUser"/>
		   	</wadl:resource>
			
			<!-- list all credentials -->
			<wadl:resource href="../../wadl/OS-KSADM-admin.wadl#userCredentials">
				<wadl:method href="#listCredentials"/>
			</wadl:resource>
			<!-- get user's API key credentials -->
			<wadl:resource href="../../wadl/RAX-KSKEY-admin.wadl#userCredentialsByType">
				<wadl:method href="#getUserCredential"/>
			</wadl:resource>
			<!-- reset user's API key credentials -->
			<wadl:resource href="../../wadl/identity-admin.wadl#reset_apikey_credentials" >
				<wadl:method href="#resetUserAPIKeyCredentials"/>
			</wadl:resource>			
		</wadl:resources>
	</section>
	<section xml:id="Role_Calls">
		<title>Roles</title>
		<para>The operations described in this section allow clients to view and manage  
			roles and user role assignments.</para>
		
		<!-- Roles operations from WADL -->
		
		<wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
					
			<!-- list roles -->
			<wadl:resource href="../../wadl/OS-KSADM-admin.wadl#roles">
				<wadl:method href="#listRoles"/>
			</wadl:resource>
			
			<!-- get role by name -->
			<wadl:resource href="../../wadl/OS-KSADM-admin.wadl#rolename">
				<wadl:method href="#getRoleByName"/>
			</wadl:resource>

				<!-- get a global role by id-->
				<wadl:resource href="../../wadl/OS-KSADM-admin.wadl#roleId">
					<wadl:method href="#getRolebyId"/>
				</wadl:resource>
	
			<wadl:resource href="../../wadl/identity-admin.wadl#admin-userRoles">
				<wadl:method href="#admin-listUserGlobalRoles"/>
			</wadl:resource>
			
				<wadl:resource href="../../wadl/OS-KSADM-admin.wadl#userRoleById">
					<wadl:method href="#addUserRole"/>
					<wadl:method href="#getUserRole"/>
					<wadl:method href="#deleteUserRole"/>
				</wadl:resource>	
				
			</wadl:resources>
	</section>
	
	<!-- TOKENS -->
	<section xml:id="Token_Calls">
		<title>Authentication tokens</title>
	<para>The &CIS; is a <glossterm baseform="REST">ReSTful</glossterm> web service that provides authentication services  
		for the &CLOUD;. To gain access, users and administrators can use the POST tokens operation 
		to request an authentication token from the &CIS;, or generate a new token after a previously 
		issued token has expired. In subsequent requests to &CIS; or other services, 
		clients include the authentication token in the HTTP x-header parameter defined as 
		<literal>X-Auth-Token</literal> to verify your identity and confirm access rights and privileges.
	</para>
	<para>Submit the POST token authentication request to the &CIS;
		endpoint URL with <literal>v2.0/tokens </literal> supplied as
		the path and a payload of credentials in the body. Credentials
		can be any of the following: <itemizedlist spacing="compact">
			<listitem>
				<para>Password credentials: user name and password</para>
			</listitem>
			<listitem>
				<para>API Key credentials: user name and API key</para>
			</listitem>
			<listitem>
				<para>Token and tenant Id or tenant name (requires Administrator privileges).</para>
			</listitem>
			<listitem>
				<para>Passcode credentials: multifactor authentication sessionId and passcode values</para>
			</listitem>
		</itemizedlist>
	</para>
	<para>Tenant information is required if you use the token method. 
		You might also need to include either the <code>tenantId</code> or <code>tenantName</code> 
		on authentication requests with API key or password credentials. Some services use multi-level authentication, with 
		service-specific credentials in addition to vendor-specific credentials. 
		In such cases, associating a user with a tenant can be a method of passing that 
		additional level of identifying information to the service. Also, if a user account 
		is assigned to multiple tenants, then including the tenant information generates the authentication 
		token for the specfied tenant.
	</para>
	<para>For details on the Tokens operations to authenticate and manage tokens, see the following sections.</para>
	<note>
		<para> 
			Some of the functionality described in this section is
			provided by the <code>RAX-AUTH</code> extension to the
			core Identity API. 
			The functionality described in this section is provided by the <code>OS-KSADM</code> 
			extension to the core Identity API.  For more information, see 
			<olink condition="admin" targetdoc="Identity-Admin-Developer-Guide"
				targetptr="Extensions-d1e688">Extensions</olink><olink condition="client" targetdoc="Identity-Developer-Guide"
					targetptr="Extensions-d1e688">Extensions</olink>.  				
		</para>
	</note>
	<wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
		<wadl:resource href="../../wadl/identity-admin.wadl#tokens">
			<!-- authenticate -->
			<wadl:method href="#authenticate"/>		
		</wadl:resource>
		<wadl:resource href="../../wadl/identity-admin.wadl#tokens">
			<wadl:method href="#authenticate_token"/>
		</wadl:resource>
		<wadl:resource href="../../wadl/identity-admin.wadl#sessionId_mfa">
			<wadl:method href="#authenticateWithMultiFactor"/>					
		</wadl:resource>
		<wadl:resource href="../../wadl/identity-admin.wadl#tokenById">
			<!-- validate token -->
			<wadl:method href="#validateToken"/>
			
			<!-- check token -->
			<wadl:method href="#checkToken"/>
		</wadl:resource>	
		<wadl:resource href="../../wadl/identity-admin.wadl#tokenById">
			<!-- revoke token -->
			<wadl:method href="#revokeToken"/>
		</wadl:resource>
	</wadl:resources>
	<section xml:id="Tenant_Calls">
		<title>Tenants</title>
		<para>The operations described in this section allow clients to manage tenants.</para>
		<wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
			<wadl:resource href="../../wadl/identity-admin.wadl#tenants">
				<wadl:method href="listTenants">
				</wadl:method>
			</wadl:resource>
		</wadl:resources>
	</section>
		
		</section>
	<section xml:id="Multifactor_Calls_client">
		<title>Multifactor</title>
		<para>The &CIS; API operations described in this section implement multifactor authentication
			capabilities for &CLOUD; accounts. For additional information, see these topics: <itemizedlist>
				<listitem>
					<para><link xlink:href="mfa_processes.html">Using multi-factor authentication</link></para>
				</listitem>
				<listitem>
					<para><link xlink:href="POST_authenticateWithMultiFactor_v2.0_tokens_Token_Calls.html">
						API request: Authenticate with multifactor credentials</link></para>
				</listitem>
			</itemizedlist></para>
		<note><title>Notes</title><itemizedlist>
			<listitem><para>The functionality described in this section is provided by the <code>RAX-AUTH</code> extension
				to the core Identity API. For more information, see <link xlink:href="Extensions-d1e688.html">Extensions</link></para>
			</listitem>
			<listitem><para></para></listitem>
		</itemizedlist><para>The functionality described in this section is provided by the <code>RAX-AUTH</code> extension
			to the core Identity API. For more information, see <olink condition="admin"
				targetdoc="Identity-Admin-Developer-Guide" targetptr="Extensions-d1e688"
				>Extensions</olink>. </para></note>
		<wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#user_mobile_phones">
				<wadl:method href="#createMobilePhone"/>		
			</wadl:resource>	
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#multifactor_vcode">
				<wadl:method href="#sendVerifyCode"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#mfa_PIN">
				<wadl:method href="#verifyDevice"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#user_mobile_phones">
				<wadl:method href="#updateMultifactorSettings"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#user_mobile_phones">
				<wadl:method href="#removeMultifactorForUser"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#user_mobile_phones">
				<wadl:method href="#getMobilePhonesForUser"/>
			</wadl:resource>
				<wadl:resource href="../../wadl/RAX-AUTH.wadl#bypass_codes">
					<wadl:method href="#generateBypassCodes"/>
				</wadl:resource>
		</wadl:resources>
		<!-- <section xml:id="mfa_api_ovw"><title>Multifactor elements and attributes</title> 
				
				<para>Multifactor authentication features are implemented in the 
					RAX-AUTH extension to the core OpenStack Keystone v2.0 API. This section 
					provides information about the extended elements, attributes, and resources 
					required to set up, use, and manage multifactor authentication capabilities.
					<variablelist>
						<varlistentry>
							<term><guilabel>RAX-AUTH:MobilePhone</guilabel></term>
							<listitem>
								<para>The <code>RAX-AUTH:MobilePhone</code> element contains
									information about a phone designated for use with
									multifactor authentication. In the Identity API, a mobile
									phone can be associated with one or more user accounts for
									the purpose of multifactor authentication. Phones are
									added to user accounts, and then verfied to establish that
									the user has possession of the phone. Phones have the
									following attributes:<variablelist>
										<varlistentry>
											<term><guilabel>number</guilabel></term>
											<listitem>
												<para>The number attribute links a phone to a user
													account so it can be used for authentication. The
													value must be specified in <link
														xlink:href="http://tools.ietf.org/html/rfc4517#ref-E.123"
														>E.123 format</link>. Use the Add mobile phone
													operation to add the phone number to the
													account.</para>
											</listitem>
										</varlistentry>
										<varlistentry>
											<term><guilabel>id</guilabel></term>
											<listitem>
												<para>The id attribute is a unique, system-generated
													string assigned to a phone automatically when it
													is added to &CLOUD; user account.</para>
											</listitem>
										</varlistentry>
										<varlistentry>
											<term><guilabel>verified</guilabel></term>
											<listitem>
												<para>Verified is a boolean value that indicates
													whether a phone has been verified for use with
													multifactor authentication. A verified phone is
													also known as a multifactor-enabled device.</para>
											</listitem>
										</varlistentry>
									</variablelist></para>
							</listitem>
						</varlistentry>
					</variablelist><variablelist>
						<varlistentry>
							<term><guilabel>Multifactor settings for user
								account</guilabel></term>
							<listitem>
								<para>Multifactor settings are attributes on a user account
									that provide information about the multifactor
									authentication capabilities available on the account.<variablelist>
										<varlistentry>
											<term><guilabel>RAX-AUTH:multiFactorEnabled
												element</guilabel></term>
											<listitem>
												<para>The <code>RAX-AUTH:multiFactorEnabled</code>
													element contains the <code>enabled</code>
													attribute, a boolean value that indicates whether
													a user can authenticate using a
													multifactor-enabled device. This value can only be
													set on accounts that are associated with a
													verified multifactor-enabled device. If you remove
													multifactor authentication capabilities from an
													account using the Delete multifactor configuration
													operation, the ç attribute is no longer included
													on the account record.</para>
											</listitem>
										</varlistentry>
										<varlistentry>
											<term><guilabel>RAX-AUTH:multiFactorState element</guilabel></term>
											<listitem>
												<para>The <code>RAX-AUTH:multiFactorState</code>
													element contains two attributes that indicate the
													state of multifactor capabilities on the account:
													<code>ACTIVE</code> indicates that multifactor
													authentication capabilities are available for use;
													<code>LOCKED</code> indicates that the user
													account is locked as a result of too many login
													attempts. If the account is locked, administrators
													can use the Unlock user account operation to
													restore access.</para>
											</listitem>
										</varlistentry><varlistentry>
											<term><guilabel>Unlock</guilabel></term>
											<listitem>
												<para>The <code>Unlock</code> attribute is a boolean value that can 
													be used to restore access to a locked account by using the 
													Unlock user account operation with <code>unlock="true"</code>.
												</para>
											</listitem>
										</varlistentry>
									</variablelist></para>
							</listitem>
						</varlistentry>
					</variablelist>
					<variablelist>
						<varlistentry>
							<term><guilabel>Multifactor verification service</guilabel></term>
							<listitem>
								<para>&CIS; uses a verification service to link phones and
									user accounts and to send verification and authentication
									codes and messages to the user. Verification services are
									managed by Identity Service administrators. <variablelist>
										<varlistentry>
											<term><emphasis role="bold">Verification
												code</emphasis></term>
											<listitem>
												<para>Verification code is a unique,
													system-generated string used to verify multifactor
													devices. The Send verification code operation
													triggers the verification service to send the code
													to the phone associated with the user account. To
													complete the verification process, the user
													returns the code to the Identity service by using
													the Verify phone operation.</para>
											</listitem>
										</varlistentry>
										<varlistentry>
											<term><emphasis role="bold">X-SessionId
												header</emphasis></term>
											<listitem>
												<para>A unique system-generated value generated and
													returned to a user in response to a successful
													authentication request by a multifactor-enabled
													user.</para>
											</listitem>
										</varlistentry>
										<varlistentry>
											<term><guilabel>passcode</guilabel></term>
											<listitem>
												<para>A passcode is a unique system-generated string that provides a credential to
													authenticate to &CIS;. When a multifactor-enabled user authenticates to &CIS;
													with valid credentials, the verification service generates the passcode and
													sends it to the  phone associated with the account.</para>
											</listitem>
											
										</varlistentry>
										<varlistentry>
											<term><guilabel>SMS text messages</guilabel></term>
											<listitem>
												<para>During the multifactor authentication process, the verification 
													service sends text messages to a user's multifactor-enabled device in response to API requests and state 
													changes such as Send verification code; send authentication passcode; and too many authentication attempts. 
													These messages are managed by Service Administrators and can be customized upon request.</para>
											</listitem>
											
										</varlistentry>
									</variablelist>
								</para>
							</listitem>
						</varlistentry>
					</variablelist><variablelist>
						<varlistentry>
							<term><guilabel>Authentication settings for
								Token</guilabel></term>
							<listitem>
								<para>Authentication settings extend the Tokens resource to
									add support for multifactor authentication.<variablelist>
										<varlistentry>
											<term><guilabel>RAX-AUTH:PasscodeCredentials</guilabel></term>
											<listitem>
												<para>The RAX-AUTH:PasscodeCredentials element contains the
													<parameter>passcode</parameter> attribute that can be used to return the
													passcode from the Rackspace verification service to &CIS; to complete the
													multifactor authentication process.</para>
											</listitem>
										</varlistentry>
										<varlistentry>
											<term><guilabel>RAX-AUTH:authenticatedBy</guilabel></term>
											<listitem>
												<para>This element returns attributes that describe the type of credentials used
													to generate the authentication token. The value can be any of the following: <itemizedlist>
														<listitem>
															<para>PASSWORD indicates the Rackspace Cloud account password
																credentials.</para>
														</listitem>
														<listitem>
															<para>APIKEY indicates API key credentials. </para>
														</listitem>
														<listitem>
															<para>RSAKey indicates RSA key credentials.</para>
														</listitem>
														<listitem>
															<para>PASSCODE indicates the multifactor authentication passcode
																credentials (RAX-AUTH: Passcode credentials).</para>
														</listitem>
													</itemizedlist> When a user successfully authenticates by using a
													multifactor-enabled device, the <parameter>authenticatedBy</parameter> element
													lists two credential types; the type used for the initial authentication to
													the Identity service, and PASSCODE for the multifactor authentication
													step.</para>
											</listitem>
										</varlistentry>
									</variablelist></para>
							</listitem>
						</varlistentry>
					</variablelist>
				</para> -->
	</section>
  </chapter>

