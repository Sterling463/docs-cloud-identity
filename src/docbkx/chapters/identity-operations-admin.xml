<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
<!-- Common entities for Identity Service source files -->
<!ENTITY % common SYSTEM "../../common/common.ent">
%common;
]>
<!-- if role="api-reference" on this chapter, generate table of all operations here -->
<chapter 
	xmlns="http://docbook.org/ns/docbook" 
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xml:id="API_Operations" version="5.0" role="api-reference">
	<title>API Operations for Service Developers</title>
	<para>Service developers can use the operations described in this chapter to get and validate
		access tokens and to manage users, tenants, roles, and service endpoints.</para>
	<para>Use the Versions and Extensions operations to get current information about &CIS; API
		contract and available extensions. These operations do not require any
		authentication.</para>
	<para>All other administrative operations require an authentication token with administrator
		privileges. You can get an authentication token by submitting an authentication request with
		&CLOUD; Administrator account credentials. Administrator accounts have either the
			<literal>identity:admin</literal> or <literal>identity:admin-user</literal> role.</para>
	
	<para>To complete administrative operations, include the authentication token in the
			<code>X-Auth-Token</code> header of the client  request to the Identity service. The
		operation runs if the identity service verifies that the token has (or belongs to a user
		that has) the <code>Admin</code> role.</para>
	<para>In some cases, &CLOUD; account users can submit administrative service requests successfully.
		In this case, the user only gets a subset of information about their own account. For
		example, if an Account user runs a List users operation, the &CIS; returns information only
		about that user. When an Administrator submits the same request, the service returns a full
		list of users with associated information about each account. </para>
	<note>
		<para>
			For information about obtaining a service account, contact 
			<link xlink:href="mailto:auth@lists.rackspace.com">auth@lists.rackspace.com</link>. 
		</para>
	</note>
	<table rules="all">
		<caption>Authentication Header</caption>
		<thead>
			<tr>
				<td>Header Type</td>
				<td>Name</td>
				<td>Sample Value</td>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>HTTP/1.1 Request</td>
				<td><code>X-Auth-Token</code></td>
				<td>
					<para> aaaaaaaa-1111-bbbb-2222-ccc3d5e6f777</para>
				</td>
			</tr>
		</tbody>
	</table>
	<para>
		Some of these operations require only the core OpenStack Keystone authentication service v2.0 API. Some
		require extensions to the API. &CIS; implementation of Keystone includes all required extension. The  
		API operations described in this Administrator Guide provide reference information and examples that 
		demonstrate how to use any operations or parameters that require an API extension.</para>
	
	<!--Versions-->
	
	<section xml:id="Version_operations">
		<title>API Contract Version</title>
		<para>The Rackspace Cloud can support multiple versions of the service API contract. This
			architecture allows service providers to develop, test, and deploy new API versions
			without disrupting service for customers that are using an existing version. You can use
			the Version operations to query the API service endpoint for information about the API
			version support in your cloud environment. </para>
		
		<wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">			
			<wadl:resource href="../../wadl/identity-admin.wadl#versions">
				<wadl:method href="#getVersions-v2"/>
			</wadl:resource>
			
			<!-- Get a specific API version -->
			<wadl:resource href="../../wadl/identity-admin.wadl#version">
				<wadl:method href="#getVersionInfo-v2.0"/>
			</wadl:resource>
		</wadl:resources>
	</section>
	
	<!--Extensions-->
	
	<section xml:id="Extensions_operations">
		<title>Extensions</title>
		<para xml:id="Extensions_ovw">The Rackspace Cloud Identity Service deploys API extensions to add user and administrative features to 
			the core OpenStack Keystone v2.0 API. You can use the Extensions API operations to query the API service 
			endpoint for information about the extensions available for the specified service.</para>
		
		<wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
			
			<!-- List extensions -->
			<wadl:resource href="../../wadl/identity-admin.wadl#extensions">
				<wadl:method href="#listExtensions-v2.0"/>
			</wadl:resource>
			
			<!-- Get extensions -->	
			
			<wadl:resource href="../../wadl/identity-admin.wadl#extension">
				<wadl:method href="#getExtension-v2.0"/>
			</wadl:resource>
		</wadl:resources>
		<xi:include href="section-extended-response.xml"/>
	</section>
	
	
	<!-- USERS -->
	<section xml:id="User_Calls">
		<title>Users</title>
		<para>The operations described in this section allow service developers to manage users.</para>
		<para> When these requests are issued by an account user, they act
			only upon that account user. You can learn more about
			account users, also called sub-accounts, at <olink targetdoc="Identity-Admin-Developer-Guide"
				targetptr="Account-Users-d1e910">“Account
				Users”</olink>.</para>
		<warning>
			<para>
				Before making any change to a user, you should confirm that you are changing the user you intend to change. 
				You can do this by treating every change as a two-step operation: first, check the target of the change; second, 
				make the change.  
			</para>
			<para> For example, both "Update User" and "Delete User" act upon
				the user specified by <code>userId</code>. Before
				attempting to update or delete a user, use  
				<link xlink:href= "GET_getUserAdmin_v2.0_users__userId__RAX-AUTH_admins_User_Calls.html">Get User Admin</link>

				to obtain the user name, email account, and status
				associated with <code>userId</code>. That's Step 1.
				Check the returned information carefully; if you are
				certain that it describes the user you intend to
				change, proceed with Step 2, updating or deleting the
				user you just examined. </para>
		</warning>
		<note>
			<para> Some of the functionality described in this section is
				provided by the <code>OS-KSADM</code>,
					<code>RAX-AUTH</code>, and <code>RAX-KSKEY</code>
				extensions to the core Identity API. For more information, see 
				<olink condition="admin" targetdoc="Identity-Admin-Developer-Guide"
					targetptr="Extensions-d1e688">Extensions</olink><olink condition="client" targetdoc="Identity-Developer-Guide"
						targetptr="Extensions-d1e688">Extensions</olink>.</para>
		</note>
		
		<!-- User API operations -->
		<wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
			<wadl:resource
				href="../../wadl/identity-admin.wadl#admin-createUser">
				<wadl:method href="#admin-createUserWithFullPayload"/>
			</wadl:resource>
			<wadl:resource
				href="../../wadl/identity-admin.wadl#admin-userlst">
				<wadl:method href="#admin-listUsers"/>
			</wadl:resource>	
			<wadl:resource
				href="../../wadl/identity-admin.wadl#admin-name">
				<wadl:method href="#admin-getUserByName"/>
			</wadl:resource>
			<wadl:resource
				href="../../wadl/identity-admin.wadl#admin-userid">
				<wadl:method href="#admin-getUserById"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/identity-admin.wadl#admin-userId">
				<wadl:method href="#admin-updateUsers"/>
			</wadl:resource>
			
			<wadl:resource
				href="../../wadl/identity-admin.wadl#admin-userId">
				<wadl:method href="#admin-deleteUser"/>
			</wadl:resource>
		
			<!-- list user group membership -->	
			<wadl:resource href="../../wadl/RAX-KSGRP-admin.wadl#user-groups-RAX-KSGRP">
				<wadl:method href="#listUserGroups"/>
			</wadl:resource>
			<!-- add API key credential -->
			<wadl:resource href="../../wadl/OS-KSADM-admin.wadl#userCredentials">
				<wadl:method href="#addUserCredential"/>
			</wadl:resource>
			<!-- list API key credentials -->
			<wadl:resource href="../../wadl/OS-KSADM-admin.wadl#userCredentials">
				<wadl:method href="#listCredentials"/>
			</wadl:resource>
			<!-- update API key credentials -->
			<wadl:resource href="../../wadl/RAX-KSKEY-admin.wadl#userCredentialsByType">
				<wadl:method href="#updateUserCredential"/>
			</wadl:resource>
			<!-- delete API key credentials -->
			<wadl:resource href="../../wadl/RAX-KSKEY-admin.wadl#userCredentialsByType">
				<wadl:method href="#deleteUserCredential"/>
			</wadl:resource>
			<!-- get user's API key credentials -->
			<wadl:resource href="../../wadl/RAX-KSKEY-admin.wadl#userCredentialsByType">
				<wadl:method href="#getUserCredential"/>
			</wadl:resource>
			<!-- reset user's API key credentials -->
			<wadl:resource href="../../wadl/identity-admin.wadl#reset_apikey_credentials" >
				<wadl:method href="#resetUserAPIKeyCredentials"/>
			</wadl:resource>	
			<!-- list user who is Admin user -->
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#user_user_admins" >
				<wadl:method href="#getUserAdmin"/>
			</wadl:resource>
		</wadl:resources>
	</section>
	
	<!-- GROUPS -->
	<section xml:id="Group_Calls">
		<title>Groups</title>
		<para>The operations described in this section allow service developers to manage groups.</para>
		
		<note>
			<para> 
				Some of the functionality described in this section is
				provided by the <code>RAX-GRPADM</code>, <code>RAX-KSGRP</code>, <code>RAX-KSKEY</code> extensions to the
				core Identity API. For more information, see 
				<olink condition="admin" targetdoc="Identity-Admin-Developer-Guide"
						targetptr="Extensions-d1e688">Extensions</olink><olink condition="client" targetdoc="Identity-Developer-Guide"
							targetptr="Extensions-d1e688">Extensions</olink>.  
				</para> 
		</note>
		<wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
			<wadl:resource href="../../wadl/identity-api/openstack-identity-api/src/docbkx/RAX-GRPADM/RAX-GRPADM.wadl#groups"/>
			<wadl:resource href="../../wadl/identity-api/openstack-identity-api/src/docbkx/RAX-GRPADM/RAX-GRPADM.wadl#groupName"/>
			<wadl:resource href="../../wadl/identity-api/openstack-identity-api/src/docbkx/RAX-GRPADM/RAX-GRPADM.wadl#groupId"/>
			<wadl:resource href="../../wadl/identity-api/openstack-identity-api/src/docbkx/RAX-GRPADM/RAX-GRPADM.wadl#user"/>
			<wadl:resource href="../../wadl/identity-api/openstack-identity-api/src/docbkx/RAX-GRPADM/RAX-GRPADM.wadl#users"/>			
		</wadl:resources>
	</section>
	
	<!-- ROLES -->
	<section xml:id="Role_Calls">
		<title>Roles</title>
		<para>The operations described in this section allow service developers to configure and manage
			user access to Cloud services and operations by using the Rackspace role-based access
			control (RBAC) feature. For an overview of the Rackspace RBAC implementation and role
			descriptions, see <olink targetdoc="Identity-Admin-Developer-Guide"
				targetptr="Role_Based_Access_Control-d1e808" condition="admin">“Role-based access
				control”</olink>.</para>
		<note>
			<para> 
				Some of the functionality described in this section is
				provided by the <code>OS-KSADM</code> extension to the
				core Identity API. 
				For more information, see 
				<olink condition="admin" targetdoc="Identity-Admin-Developer-Guide"
					targetptr="Extensions-d1e688">Extensions</olink><olink condition="client" targetdoc="Identity-Developer-Guide"
						targetptr="Extensions-d1e688">Extensions</olink>. 
			</para>
		</note>
		<wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
			<!-- list roles -->
			<wadl:resource href="../../wadl/OS-KSADM-admin.wadl#roles">
				<wadl:method href="#listRoles"/>
			</wadl:resource>
			<!-- add a role globally -->
			<wadl:resource href="../../wadl/OS-KSADM-admin.wadl#roles">
				<wadl:method href="#addRole"/>
			</wadl:resource>
			<!-- get a global role -->
			<wadl:resource href="../../wadl/OS-KSADM-admin.wadl#roleId">
				<wadl:method href="#getRole"/>
			</wadl:resource>
			<!-- delete a global role -->
			<wadl:resource href="../../wadl/OS-KSADM-admin.wadl#roleId">
				<wadl:method href="#deleteRole"/>
			</wadl:resource>
			<!-- add a global role to a user -->
			<wadl:resource href="../../wadl/OS-KSADM-admin.wadl#userRoleById">
				<wadl:method href="#addUserRole"/>
			</wadl:resource>
			<!-- delete a global role from a user -->
			<wadl:resource href="../../wadl/OS-KSADM-admin.wadl#userRoleById">
				<wadl:method href="#deleteUserRole"/>
			</wadl:resource>
			<!-- list users with role -->
			<wadl:resource href="../../wadl/OS-KSADM-admin.wadl#roleIdRAXAUTHUsers">
				<wadl:method href="#getUsersWithRole"/>
			</wadl:resource>
			<!-- list global roles available to a user -->
			<wadl:resource href="../../wadl/identity-admin.wadl#admin-userRoles">
				<wadl:method href="#admin-listUserGlobalRoles"/>
			</wadl:resource>
		</wadl:resources>
	</section>
	
	<!-- TOKENS -->
	<section xml:id="Token_Calls">
		<title>Authentication tokens</title>
		<para>The &CIS; is a <glossterm baseform="REST">ReSTful</glossterm> web service that provides authentication services  
			for the &CLOUD;. To gain access, users and administrators can use the POST tokens operation 
			to request an authentication token from the &CIS;, or generate a new token after a previously 
			issued token has expired. In subsequent requests to &CIS; or other services, 
			clients include the authentication token in the HTTP x-header parameter defined as 
			<literal>X-Auth-Token</literal> to verify your identity and confirm access rights and privileges.
		</para>
		<para>
			Submit the POST token authentication request to the &CIS; endpoint URL with <literal>v2.0/tokens </literal> 
			supplied as the path and a payload of credentials in the body. Credentials can be any of the following:
			<itemizedlist spacing="compact">
				<listitem><para>Password credentials: user name and password</para></listitem>
				<listitem><para>API Key credentials: user name and API key</para></listitem>
				<listitem><para>Token and tenant Id or tenant name (requires Administrator privileges).</para></listitem>
				<listitem><para>Passcode credentials: multifactor authentication sessionId and passcode values</para></listitem>
				<listitem audience="admin"><para>RSA credentials: Rackspace employees can authenticate with an SSO id and RSA key.</para></listitem>
			</itemizedlist>
		</para>
		<para>Tenant information is required if you use the token method. 
			You might also need to include either the <code>tenantId</code> or <code>tenantName</code> 
			on authentication requests with API key or password credentials. Some services use multi-level authentication, with 
			service-specific credentials in addition to vendor-specific credentials. 
			In such cases, associating a user with a tenant can be a method of passing that 
			additional level of identifying information to the service. Also, if a user account 
			is assigned to multiple tenants, then including the tenant information generates the authentication 
			token for the specfied tenant.
		</para>
		<para>For details on the Tokens operations to authenticate and manage tokens, see the following sections.</para>
		<note>
			<para> 
				Some of the functionality described in this section is
				provided by the <code>RAX-AUTH</code> extension to the
				core Identity API. 
					The functionality described in this section is provided by the <code>OS-KSADM</code> 
					extension to the core Identity API.  For more information, see 
					<olink condition="admin" targetdoc="Identity-Admin-Developer-Guide"
						targetptr="Extensions-d1e688">Extensions</olink><olink condition="client" targetdoc="Identity-Developer-Guide"
							targetptr="Extensions-d1e688">Extensions</olink>.  				
			</para>
		</note>
		<wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
			<wadl:resource href="../../wadl/identity-admin.wadl#tokens">
				<!-- authenticate -->
				<wadl:method href="#authenticate"/>		
			</wadl:resource>
			<wadl:resource href="../../wadl/identity-admin.wadl#tokens">
				<wadl:method href="#authenticate_token"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/identity-admin.wadl#sessionId_mfa">
				<wadl:method href="#authenticateWithMultiFactor"/>					
			</wadl:resource>
			<wadl:resource href="../../wadl/identity-admin.wadl#tokenById">
				<!-- validate token -->
				<wadl:method href="#validateToken"/>
				<!-- check token -->
				<wadl:method href="#checkToken"/>
				<!-- revoke token -->
				<wadl:method href="#revokeToken"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/identity-admin.wadl#endpointsForToken">
				<!-- list endpoints for token -->
				<wadl:method href="#listEndpointsForToken"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#tokens">
				<!-- authenticate as Racker -->
				<wadl:method href="#authenticateAsRacker"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#federation">
				<!-- federation - get token by SAML -->
				<wadl:method href="#getTokenBySAML"/>
			</wadl:resource>
		</wadl:resources>
	</section>
	
	<!-- TENANTS -->
	<section xml:id="Tenant_Calls">
		<title>Tenants</title>
		<para>The operations described in this section allow service developers to manage tenants.</para>
		<wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
			<wadl:resource href="../../wadl/OS-KSADM-admin.wadl#tenants">
				<wadl:method href="#addTenant"/>
				<wadl:resource href="../../wadl/OS-KSADM-admin.wadl#tenantById">
					<wadl:method href="#updateTenant"/>
					<wadl:method href="#deleteTenant"/>
					<wadl:resource href="../../wadl/OS-KSADM-admin.wadl#usersForTenant">
						<wadl:method href="#listUsersForTenant"/>
						<wadl:resource href="../../wadl/OS-KSADM-admin.wadl#userSpecificRoleForTenant">
							<wadl:method href="#addRolesToUserOnTenant"/>
							<wadl:method href="#deleteRoleFromUserOnTenant"/>
						</wadl:resource>
					</wadl:resource>
				</wadl:resource>
			</wadl:resource>
			<wadl:resource href="../../wadl/identity-admin.wadl#tenants">
				<wadl:method href="#listTenants"/>
				<wadl:method href="#getTenantByName"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/identity-admin.wadl#tenantById">
				<wadl:method href="#getTenantById"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/identity-admin.wadl#userRolesForTenant">
				<wadl:method href="#listRolesForUserOnTenant">
					<wadl:doc>
						<important>
							<para>
								The Rackspace implementation of the OpenStack Identity Service v2.0 
								supports <code>GET v2.0/tenants/{tenantId}/users/{userId}/roles</code>
								for internal users only.  Customers do not have access to this call.
							</para>
						</important>
					</wadl:doc>
				</wadl:method>
			</wadl:resource>
		</wadl:resources>
	</section>
	
	<!-- ENDPOINT TEMPLATES -->
	<section xml:id="Endpoint_Template_Calls">
		<title>Endpoint Templates</title>
		<note>
			<para> 
				Some of the functionality described in this section is
				provided by the <code>OS-KSCATALOG</code> extension to the
				core Identity API. 
				For more information about extensions, see 
				<olink condition="admin" targetdoc="Identity-Admin-Developer-Guide"
					targetptr="Extensions-d1e688">Extensions</olink><olink condition="client" targetdoc="Identity-Admin-Developer-Guide"
						targetptr="Extensions-d1e688">Extensions</olink> section.  
			</para>
		</note>
		 
		<wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
			<wadl:resource href="../../wadl/OS-KSCATALOG-admin.wadl#endpointTemplates">
				<wadl:method href="#listEndpointTemplates"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/OS-KSCATALOG-admin.wadl#endpointTemplates">
				<wadl:method href="#addEndpointTemplate"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/OS-KSCATALOG-admin.wadl#endpointTemplateId">
				<wadl:method href="#getEndpointTemplate"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/OS-KSCATALOG-admin.wadl#endpointTemplateId">
				<wadl:method href="#deleteEndpointTemplate"/>
			</wadl:resource>
		</wadl:resources>
		
	</section>
	
	<!-- ENDPOINTS -->
	<section xml:id="Endpoint_Calls">
		<title>Endpoints</title>
		<note>
			<para> 
				Some of the functionality described in this section is
				provided by the <code>OS-KSCATALOG</code> extension to the
				core Identity API. For more information, see <olink condition="admin" targetdoc="Identity-Admin-Developer-Guide"
					targetptr="Extensions-d1e688">Extensions</olink><olink condition="client" targetdoc="Identity-Admin-Developer-Guide"
						targetptr="Extensions-d1e688">Extensions</olink>.
			</para>
		</note>
		<wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
			<wadl:resource href="../../wadl/OS-KSCATALOG-admin.wadl#endpoints">
				<wadl:method href="#listEndpoints"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/OS-KSCATALOG-admin.wadl#endpoints">
				<wadl:method href="#addEndpoint"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/OS-KSCATALOG-admin.wadl#endpoint">
				<wadl:method href="#getEndpoint"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/OS-KSCATALOG-admin.wadl#endpoint">
				<wadl:method href="#deleteEndpoint"/>
			</wadl:resource>
		</wadl:resources>
	</section>
	
	<!-- SECRETS -->
	<section xml:id="Secret_Calls">
		<title>Secret Questions and Answers</title>
		<para>The operations described in this section allow service developers to manage 
			secret questions and answers. Secret questions and answers can be used to identify a user to a support Racker via telephone.</para>
		<note>
			<para> 
				Some of the functionality described in this section is
				provided by the <code>RAX-AUTH</code> and <code>RAX-KSQA</code> extensions to the
				core Identity API. For more information, see 
				<olink condition="admin" targetdoc="Identity-Admin-Developer-Guide"
					targetptr="Extensions-d1e688">Extensions</olink><olink condition="client" targetdoc="Identity-Developer-Guide"
						targetptr="Extensions-d1e688">Extensions</olink>.
			</para>
		</note>
		<wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
			<wadl:resource href="../../wadl/RAX-KSQA-admin.wadl#secretqa">
				<wadl:method href="#getUserSecretQA"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#add_user_secretqa">
				<wadl:method href="#getUserSecretQAs"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/RAX-KSQA-admin.wadl#secretqa">
				<wadl:method href="#updateUserSecretQA"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#add_user_secretqa">
				<wadl:method href="#saveUserSecretQA"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#questions">
				<wadl:method href="#getQuestions"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#question">
				<wadl:method href="#getQuestion"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#questions">
				<wadl:method href="#createQuestion"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#question">
				<wadl:method href="#updateQuestion"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#question">
				<wadl:method href="#deleteQuestion"/>
			</wadl:resource>
		</wadl:resources>
	</section>
	
	<!-- IMPERSONATIONS -->
	<section xml:id="Impersonation_Calls">
		<title>Impersonations</title>
		<para>Impersonation operations allow service developers to manage Rackers' impersonations of users
			for diagnostic purposes. <link xlink:href="Impersonation_Calls.html">Impersonation</link> shows the process for a Racker
			to impersonate another user. The Racker issues one POST with his or her own
			credentials, followed by a second POST request that identifies the user to be impersonated.</para>
		<figure xml:id="impersonation">
			<title>Impersonation workflow for Racker accounts.
			</title>
			<!-- this is Joe Savak's drawing, 
				from https://docs.google.com/a/rackspace.com/drawings/d/1fxomVwZRmWT6NYmhTFwj9VMfQ_NQHLVfpfb6474xnoc/edit 
			    PNG fits PDF width at 55%, 710x477
			-->
			<mediaobject>
				<imageobject>
					<imagedata fileref="../figures/auth-impersonation.png" format="PNG" align="center" />
				</imageobject>
			</mediaobject>
		</figure>
		<note>
			<para> 
				Some of the functionality described in this section is
				provided by the <code>RAX-AUTH</code> extension to the
				core Identity API. 
				For more information, see 
				<olink condition="admin" targetdoc="Identity-Admin-Developer-Guide"
					targetptr="Extensions-d1e688">Extensions</olink><olink condition="client" targetdoc="Identity-Developer-Guide"
						targetptr="Extensions-d1e688">Extensions</olink>.  
			</para>
		</note>
		<wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#impersonation-tokens">
				<wadl:method href="#impersonateUser">
				<wadl:doc>
					<tip>
						<para>For information about how an impersonator can obtain a validated token,
							see <link xlink:href="http://docs-internal.rackspace.com/auth/api/v2.0/auth-admin-devguide/content/GET_validateToken_v2.0_tokens__tokenId__Token_Calls.html">
								Validate Token</link>.
						
						</para>
					</tip>
				</wadl:doc>
				</wadl:method>
			</wadl:resource>
		</wadl:resources>
	</section>
	
	<!-- RATE LIMITING -->
	<section xml:id="Ratelimiting_Calls">
		<title>Rate Limits</title>
		<para>The operations described in this section allow service developers to manage rate limits.</para>
		<para>
			The rate limiting logic is based on a fixed-size bucket algorithm.
		</para>
		<para> Rate limiting is configured in a database which is accessible
			via a separate endpoint. To update the rate limiting
			configuration, change the values of three parameters in
			the rate limiting database. Optionally, a fourth parameter
			can be used to exclude (white list) some requests so that
			no rate limits apply to them. 
		</para>
			<table rules="all">
				<caption>Rate Limiting Configuration
					Parameters</caption>
				<col width="38%"/>
				<col width="16%"/>
				<col width="38%"/>
				<col width="8%"/>
				<thead>
					<tr>
						<th>Parameter</th>
						<th>Type</th>
						<th>Description</th>
						<th>Default Value</th>
					</tr>
				</thead>				
				<tbody>
					<tr>
						<td><code>rate.limit.interval.duration</code></td>
						<td>Integer</td>
						<td>Size (in seconds) of the time interval
							within which to limit the number of
							requests to the maximum defined by
								<code>rate.limit.threshold</code>.</td>
						<td>1</td>
					</tr>
					<tr>
						<td><code>rate.limit.threshold</code></td>
						<td>Integer</td>
						<td>Number of requests allowed within the
							interval defined by
								<code>rate.limit.interval.duration</code>.</td>
						<td>50</td>
					</tr>
					<tr>
						<td><code>rate.limit.enabled</code></td>
						<td>Boolean</td>
						<td>Enable (true) or disable (false) all rate
							limiting functionality.</td>
						<td>false</td>
					</tr>
					<tr>
						<td><code>rate.limit.whitelist</code></td>
						<td>Comma-delimited list</td>
						<td>List of identifiers for which the rate
							should not be limited</td>
						<td><emphasis role="italic"
							>none</emphasis></td>
					</tr>
				</tbody>
			</table>
		<para> For example, if
				<code>rate.limit.enabled=true</code>,
				<code>rate.limit.threshold=10</code>, and
				<code>rate.limit.interval.duration=60</code>, then the
			service call rate will be limited to 10 requests every 60
			seconds. Users who issue more than 10 requests per 60
			seconds must wait until their bucket is cleared.
		</para>
		<para>
			For example, if  
			<code>rate.limit.whitelist=192.168.1.105,user:alex,192.168.1.243</code>,
			then two IP addresses and a user named "alex" are white listed and therefore not subject to the general rate limits.
		</para>
		<figure>
		<title>
			After hitting the Auth endpoint, a request hits the rate limiting filter; if the filter determines that rate limits apply, the rate limit module is called.
		</title>
		<!-- this is Alex Silva's drawing, 
				from http://red.rackspace.com/display/auth/Cloud+Auth+Rate+Limiting 
			    PNG fits PDF width 521x389
			-->
		<mediaobject>
			<imageobject>
				<imagedata fileref="../figures/auth-ratelimiting-flow.png" format="PNG" align="center" />
			</imageobject>
		</mediaobject>
		</figure>
		<para>
			Request keys are at the core of the rate limiting functionality. For each request for a resource, 
			these unique request identifiers relate the request to the user who submitted the request. The key-generation algorithm is illustrated below:
		</para>
		<figure>
			<title> A request key for rate limiting can be generated from an IP
				address, a header value, or a valid token. </title>
			<!-- this is Alex Silva's drawing, 
				from http://red.rackspace.com/display/auth/Cloud+Auth+Rate+Limiting 
			    PNG fits PDF width at 521x317
			-->
			<mediaobject>
				<imageobject>
					<imagedata fileref="../figures/auth-ratelimiting-keygeneration-20.png" format="PNG" align="center" />
				</imageobject>
			</mediaobject>
		</figure>
		<note>
			<para>
				All API calls are rate limited, including API calls used to update the rate limiting configuration.
			</para>
			<para>
				When a request is denied for rate limits, 30 seconds should pass before the rate limits are reset.
			</para>
			<para>
				When no limit group is specified for a user, that user is assigned to the <code>default</code> group.
			</para>
		</note>
		<!--- this section comes from 1 WADL: RAX-RATELIMIT-admin -->
		<wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
			<!-- list rate limit for 1 user -->
			<wadl:resource href="../../wadl/RAX-RATELIMIT-admin.wadl#rtadm">
				<wadl:method href="#getRateLimit"/>
			</wadl:resource>
			<!-- change rate limit for 1 user -->
			<wadl:resource href="../../wadl/RAX-RATELIMIT-admin.wadl#rtadm">
				<wadl:method href="#updateRateLimit"/>
			</wadl:resource>
			<!-- add 1 entry to rate limit whitelist -->
			<wadl:resource href="../../wadl/RAX-RATELIMIT-admin.wadl#rtadm">
				<wadl:method href="#addWhitelistEntry"/>
			</wadl:resource>
			<!-- delete 1 entry from rate limit whitelist -->
			<wadl:resource href="../../wadl/RAX-RATELIMIT-admin.wadl#rtadm">
				<wadl:method href="#deleteWhitelistEntry"/>
			</wadl:resource>
			<!-- replace entire rate limit whitelist -->
			<wadl:resource href="../../wadl/RAX-RATELIMIT-admin.wadl#rtadm">
				<wadl:method href="#replaceWhitelist"/>
			</wadl:resource>
		</wadl:resources>
	</section>
	
	<!-- DOMAINS -->
	<section xml:id="Domain_Calls">
		<title>Domains</title>
		<para>The operations described in this section allow service developers to manage domains.</para>
		<para>A domain establishes an administrative boundary for a customer and a container for a customer's tenants (accounts) and users.</para>
		<note>
			<para> Some of the functionality described in this section is
				provided by the <code>RAX-AUTH</code> extension to the
				core Identity API. For more information, see 
				<olink condition="admin" targetdoc="Identity-Admin-Developer-Guide"
					targetptr="Extensions-d1e688">Extensions</olink><olink condition="client" targetdoc="Identity-Developer-Guide"
						targetptr="Extensions-d1e688">Extensions</olink>.</para>
		</note>
		<wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#domains">
				<wadl:method href="#getDomains">
					<wadl:doc xmlns:wadl="http://wadl.dev.java.net/2009/02" xmlns="http://docbook.org/ns/docbook">
						<!-- DocBook Markup is legal here -->
						<!-- Create a Domain: Creates a domain. Clients must specify the domain id in the request body. -->
					</wadl:doc>
				</wadl:method>
			</wadl:resource>
			<!-- Path: /v2.0/RAX-AUTH/domains -->
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#domains">
				<wadl:method href="#createDomain">
					<wadl:doc xmlns:wadl="http://wadl.dev.java.net/2009/02" xmlns="http://docbook.org/ns/docbook">
						<!-- DocBook Markup is legal here -->
						<!-- Create a Domain: Creates a domain. Clients must specify the domain id in the request body. -->
					</wadl:doc>
				</wadl:method>
			</wadl:resource>
			<!-- Path: /v2.0/RAX-AUTH/domains/{domainId} -->
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#domain">
				<wadl:method href="#getDomain">
					<wadl:doc xmlns:wadl="http://wadl.dev.java.net/2009/02" xmlns="http://docbook.org/ns/docbook">
						<!-- DocBook Markup is legal here -->
						<!-- Get a Domain: Gets a domain. -->
					</wadl:doc>
				</wadl:method>
			</wadl:resource>
			<!-- Path: /v2.0/RAX-AUTH/domains/{domainId} -->
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#domain">
				<wadl:method href="#updateDomain">
					<wadl:doc xmlns:wadl="http://wadl.dev.java.net/2009/02" xmlns="http://docbook.org/ns/docbook">
						<!-- DocBook Markup is legal here -->
						<!-- Update a Domain: Updates a domain. -->
					</wadl:doc>
				</wadl:method>
			</wadl:resource>
			<!-- Path: /v2.0/RAX-AUTH/domains/{domainId} -->
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#domain">
				<wadl:method href="#deleteDomain">
					<wadl:doc xmlns:wadl="http://wadl.dev.java.net/2009/02" xmlns="http://docbook.org/ns/docbook">
						<!-- DocBook Markup is legal here -->
						<!-- Deletes a Domain: Deletes a domain. This request will only succeed if there are no entities that exist in this domain e.g users, tenants. A client will have t... -->
					</wadl:doc>
				</wadl:method>
			</wadl:resource>
			<!-- Path: /v2.0/RAX-AUTH/domains/{domainId}/endpoints -->
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#domain_endpoints">
				<wadl:method href="#getDomainEndpoints">
					<wadl:doc xmlns:wadl="http://wadl.dev.java.net/2009/02" xmlns="http://docbook.org/ns/docbook">
						<!-- DocBook Markup is legal here -->
						<!-- Get Endpoints for Domain: Gets endpoints restricted to a domain. -->
					</wadl:doc>
				</wadl:method>
			</wadl:resource>
			<!-- Path: /v2.0/RAX-AUTH/domains/{domainId}/users -->
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#domain_users">
				<wadl:method href="#getDomainUsers">
					<wadl:doc xmlns:wadl="http://wadl.dev.java.net/2009/02" xmlns="http://docbook.org/ns/docbook">
						<!-- DocBook Markup is legal here -->
						<!-- Get Users in Domain: Get users in a domain. -->
					</wadl:doc>
				</wadl:method>
			</wadl:resource>
			<!-- Path: /v2.0/RAX-AUTH/domains/{domainId}/users/{userId} -->
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#domain_user">
				<wadl:method href="#addUserToDomain">
					<wadl:doc xmlns:wadl="http://wadl.dev.java.net/2009/02" xmlns="http://docbook.org/ns/docbook">
						<!-- DocBook Markup is legal here -->
						<!-- Add User to Domain: Add a user to a domain. A user can only exist in one domain at a time. So when you add a user to a domain, the user is automatically removed... -->
					</wadl:doc>
				</wadl:method>
			</wadl:resource>
			<!-- Path: /v2.0/RAX-AUTH/domains/{domainId}/tenants -->
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#domain_tenants">
				<wadl:method href="#getDomainTenants">
					<wadl:doc xmlns:wadl="http://wadl.dev.java.net/2009/02" xmlns="http://docbook.org/ns/docbook">
						<!-- DocBook Markup is legal here -->
						<!-- Get Tenants in Domain: Get tenants in a domain. -->
					</wadl:doc>
				</wadl:method>
			</wadl:resource>
			<!-- Path: /v2.0/RAX-AUTH/domains/{domainId}/tenants/{tenantId} -->
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#domain_tenant">
				<wadl:method href="#addTenantToDomain">
					<wadl:doc xmlns:wadl="http://wadl.dev.java.net/2009/02" xmlns="http://docbook.org/ns/docbook">
						<!-- DocBook Markup is legal here -->
						<!-- Add Tenant to Domain: Add a tenant to a domain. A tenant can only exist in one domain at a time. So when you add a tenant to a domain, it is automatically removed... -->
					</wadl:doc>
				</wadl:method>
			</wadl:resource>
		</wadl:resources>
	</section>
	
	<!-- REGIONS -->
	<section xml:id="Region_Calls">
		<title>Regions</title>
		<para>The operations described in this section allow service developers to manage the regions associated with services.</para>
		<note>
			<para> 
				Some of the functionality described in this section is
				provided by the <code>RAX-AUTH</code> extension to the
				core Identity API. 
				You can learn more about API extensions in the <olink condition="admin" targetdoc="Identity-Admin-Developer-Guide"
					targetptr="Extensions-d1e688"/><olink condition="admin" targetdoc="Identity-Developer-Guide"
						targetptr="Extensions-d1e688"/>.  
			</para>
		</note>
		<wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
			<!-- list regions -->
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#regions">
				<wadl:method href="#getRegions">
				</wadl:method>
			</wadl:resource>
			<!-- create region -->
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#regions">
				<wadl:method href="#createRegion">
				</wadl:method>
			</wadl:resource>
			<!-- get region -->
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#region">
				<wadl:method href="#getRegion">
				</wadl:method>
			</wadl:resource>
			<!-- update region -->
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#region">
				<wadl:method href="#updateRegion">
				</wadl:method>
			</wadl:resource>
			<!-- delete region -->
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#region">
				<wadl:method href="#deleteRegion">
				</wadl:method>
			</wadl:resource>
			<!-- list default region for a service -->
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#default-region-services">
				<wadl:method href="#getDefaultRegionServices">
				</wadl:method>
			</wadl:resource>
			<!-- specify default region for a service -->
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#default-region-services">
				<wadl:method href="#setDefaultRegionServices">
				</wadl:method>
			</wadl:resource>
		</wadl:resources>
		</section>
	
	<!-- POLICIES -->
	<section xml:id="Policy_Calls">
		<title>Policies</title>
		<para>The operations described in this section allow service developers to manage policies.</para>
		<note>
			<para> 
				Some of the functionality described in this section is
				provided by the <code>RAX-AUTH</code> extension to the
				core Identity API. For more information, see 
				<olink condition="admin" targetdoc="Identity-Admin-Developer-Guide"
					targetptr="Extensions-d1e688">Extensions</olink><olink condition="client" targetdoc="Identity-Developer-Guide"
						targetptr="Extensions-d1e688">Extensions</olink>.
			</para>
		</note>
		<wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
			<!-- get policies; create policy -->
			<!-- get/update/delete policy -->
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#policies" />
			<!-- get/update/delete policy -->
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#policy" />
			<!-- get complete content (blob) of a policy -->
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#policyBlob" >
				<wadl:method href="#getPolicyBlob" />
			</wadl:resource>
		</wadl:resources>
	</section>
		
	<!-- SERVICE APIS -->
	<section xml:id="Service_API_Calls">
		<title>Service APIs</title>
		<para>The operations described in this section allow service developers to manage service APIs 
			and their capabilities.</para>
		<important>
			<para>
				As of February 8, 2013, these Service API operations are planned but not implemented. 
				For more information, contact Joe Savak or Angela Molock.
			</para>
		</important>
		<note>
			<para> 
				Some of the functionality described in this section is provided by the <code>RAX-AUTH</code> 
				extension to the core Identity API. For more information, see 
				<olink condition="admin" targetdoc="Identity-Admin-Developer-Guide"
					targetptr="Extensions-d1e688">Extensions</olink><olink condition="client" targetdoc="Identity-Developer-Guide"
						targetptr="Extensions-d1e688">Extensions</olink>.  
			</para>
		</note>
		<wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
			<!-- list available service APIs -->
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#service_apis" />
			<!-- get/update/remove capabilities of service APIs -->
			<wadl:resource href="../../wadl/RAX-AUTH.wadl#service_api_capabilities" />
		</wadl:resources>
	</section>
	
	<!-- SERVICE OPERATIONS -->
	<section xml:id="Service_Calls">
		<title>Service Operations</title>
		<para>The operations described in this section allow service developers to manage services.  These
		services correspond to the OpenStack Keystone services.</para>
		<note>
			<para> 
				The functionality described in this section is provided by the <code>OS-KSADM</code> 
				extension to the core Identity API.  For more information, see 
				<olink condition="admin" targetdoc="Identity-Admin-Developer-Guide"
					targetptr="Extensions-d1e688">Extensions</olink><olink condition="client" targetdoc="Identity-Developer-Guide"
						targetptr="Extensions-d1e688">Extensions</olink>.  
			</para>
		</note>
		<wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
			<wadl:resource href="../../wadl/OS-KSADM-admin.wadl#services">
				<wadl:method href="#listServices"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/OS-KSADM-admin.wadl#serviceName">
				<wadl:method href="#getServiceByName"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/OS-KSADM-admin.wadl#serviceId">
				<wadl:method href="#getServiceById"/>
			</wadl:resource>
	
			<wadl:resource href="../../wadl/OS-KSADM-admin.wadl#service">
				<wadl:method href="#addService"/>
			</wadl:resource>
			<wadl:resource href="../../wadl/OS-KSADM-admin.wadl#service">
				<wadl:method href="#deleteService"/>
			</wadl:resource>
		</wadl:resources>
	</section>
	
		<!-- MULTIFACTOR OPERATIONS -->	
		<section xml:id="Multifactor_Calls">
			<title>Multi-factor</title>
			<note>
				<para>Multi-factor authentication is currently available only to
					customers enrolled in the Early Access program for this feature.</para></note>
			
			<para>The &CIS; API operations described in this section implement multifactor authentication
			capabilities for &CLOUD; accounts. For additional information, see these topics: <itemizedlist>
				<listitem>
					<para><link xlink:href="mfa_processes.html">Multifactor authentication set up,
							operation, and management</link></para>
				</listitem>
				<listitem>
					<para><link
							xlink:href="POST_authenticateWithMultiFactor_v2.0_tokens_Token_Calls.html"
							>API request: Authenticate with multifactor credentials</link></para>
				</listitem>
				<!-- <listitem>
					<para><link xlink:href="mfa_api_ovw.html">Multifactor elements and
							attributes</link></para></listitem> -->
			</itemizedlist></para>
			<note><para>The functionality described in this section is provided by the <code>RAX-AUTH</code> extension
				to the core Identity API. For more information, see <olink condition="admin"
					targetdoc="Identity-Admin-Developer-Guide" targetptr="Extensions-d1e688"
					>Extensions</olink>. </para></note>
			<wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
				<wadl:resource href="../../wadl/RAX-AUTH.wadl#user_mobile_phones">
					<wadl:method href="#createMobilePhone"/>		
				</wadl:resource>	
				<wadl:resource href="../../wadl/RAX-AUTH.wadl#multifactor_vcode">
					<wadl:method href="#sendVerifyCode"/>
				</wadl:resource>
				<wadl:resource href="../../wadl/RAX-AUTH.wadl#mfa_PIN">
					<wadl:method href="#verifyDevice"/>
				</wadl:resource>
				<wadl:resource href="../../wadl/RAX-AUTH.wadl#user_mobile_phones">
					<wadl:method href="#updateMultifactorSettings"/>
				</wadl:resource>
				<wadl:resource href="../../wadl/RAX-AUTH.wadl#user_mobile_phones">
					<wadl:method href="#removeMultifactorForUser"/>
				</wadl:resource>
				<wadl:resource href="../../wadl/RAX-AUTH.wadl#user_mobile_phones">
					<wadl:method href="#getMobilePhonesForUser"/>
				</wadl:resource>
				<wadl:resource href="../../wadl/RAX-AUTH.wadl#bypass_codes">
					<wadl:method href="#generateBypassCodes"/>
				</wadl:resource>
				<wadl:resource href="../../wadl/RAX-AUTH.wadl#multifactor_unlock">
					<wadl:method href="#unlockMultifactorForUser"/>
				</wadl:resource>
			</wadl:resources>
			<!-- <section xml:id="mfa_api_ovw"><title>Multifactor elements and attributes</title> 
				
				<para>Multifactor authentication features are implemented in the 
					RAX-AUTH extension to the core OpenStack Keystone v2.0 API. This section 
					provides information about the extended elements, attributes, and resources 
					required to set up, use, and manage multifactor authentication capabilities.
						<variablelist>
						<varlistentry>
							<term><guilabel>RAX-AUTH:MobilePhone</guilabel></term>
							<listitem>
								<para>The <code>RAX-AUTH:MobilePhone</code> element contains
									information about a phone designated for use with
									multifactor authentication. In the Identity API, a mobile
									phone can be associated with one or more user accounts for
									the purpose of multifactor authentication. Phones are
									added to user accounts, and then verfied to establish that
									the user has possession of the phone. Phones have the
									following attributes:<variablelist>
										<varlistentry>
											<term><guilabel>number</guilabel></term>
											<listitem>
												<para>The number attribute links a phone to a user
													account so it can be used for authentication. The
													value must be specified in <link
														xlink:href="http://tools.ietf.org/html/rfc4517#ref-E.123"
														>E.123 format</link>. Use the Add mobile phone
													operation to add the phone number to the
													account.</para>
											</listitem>
										</varlistentry>
										<varlistentry>
											<term><guilabel>id</guilabel></term>
											<listitem>
												<para>The id attribute is a unique, system-generated
													string assigned to a phone automatically when it
													is added to &CLOUD; user account.</para>
											</listitem>
										</varlistentry>
										<varlistentry>
											<term><guilabel>verified</guilabel></term>
											<listitem>
												<para>Verified is a boolean value that indicates
													whether a phone has been verified for use with
													multifactor authentication. A verified phone is
													also known as a multifactor-enabled device.</para>
											</listitem>
										</varlistentry>
									</variablelist></para>
							</listitem>
						</varlistentry>
					</variablelist><variablelist>
						<varlistentry>
							<term><guilabel>Multifactor settings for user
								account</guilabel></term>
							<listitem>
								<para>Multifactor settings are attributes on a user account
									that provide information about the multifactor
									authentication capabilities available on the account.<variablelist>
										<varlistentry>
											<term><guilabel>RAX-AUTH:multiFactorEnabled
												element</guilabel></term>
											<listitem>
												<para>The <code>RAX-AUTH:multiFactorEnabled</code>
													element contains the <code>enabled</code>
													attribute, a boolean value that indicates whether
													a user can authenticate using a
													multifactor-enabled device. This value can only be
													set on accounts that are associated with a
													verified multifactor-enabled device. If you remove
													multifactor authentication capabilities from an
													account using the Delete multifactor configuration
													operation, the ç attribute is no longer included
													on the account record.</para>
											</listitem>
										</varlistentry>
										<varlistentry>
											<term><guilabel>RAX-AUTH:multiFactorState element</guilabel></term>
											<listitem>
												<para>The <code>RAX-AUTH:multiFactorState</code>
													element contains two attributes that indicate the
													state of multifactor capabilities on the account:
													<code>ACTIVE</code> indicates that multifactor
													authentication capabilities are available for use;
													<code>LOCKED</code> indicates that the user
													account is locked as a result of too many login
													attempts. If the account is locked, administrators
													can use the Unlock user account operation to
													restore access.</para>
											</listitem>
										</varlistentry><varlistentry>
											<term><guilabel>Unlock</guilabel></term>
											<listitem>
												<para>The <code>Unlock</code> attribute is a boolean value that can 
													be used to restore access to a locked account by using the 
													Unlock user account operation with <code>unlock="true"</code>.
												</para>
											</listitem>
										</varlistentry>
									</variablelist></para>
							</listitem>
						</varlistentry>
					</variablelist>
					<variablelist>
						<varlistentry>
							<term><guilabel>Multifactor verification service</guilabel></term>
							<listitem>
								<para>&CIS; uses a verification service to link phones and
									user accounts and to send verification and authentication
									codes and messages to the user. Verification services are
									managed by Identity Service administrators. <variablelist>
										<varlistentry>
											<term><emphasis role="bold">Verification
												code</emphasis></term>
											<listitem>
												<para>Verification code is a unique,
													system-generated string used to verify multifactor
													devices. The Send verification code operation
													triggers the verification service to send the code
													to the phone associated with the user account. To
													complete the verification process, the user
													returns the code to the Identity service by using
													the Verify phone operation.</para>
											</listitem>
										</varlistentry>
										<varlistentry>
											<term><emphasis role="bold">X-SessionId
												header</emphasis></term>
											<listitem>
												<para>A unique system-generated value generated and
													returned to a user in response to a successful
													authentication request by a multifactor-enabled
													user.</para>
											</listitem>
										</varlistentry>
										<varlistentry>
											<term><guilabel>passcode</guilabel></term>
											<listitem>
												<para>A passcode is a unique system-generated string that provides a credential to
													authenticate to &CIS;. When a multifactor-enabled user authenticates to &CIS;
													with valid credentials, the verification service generates the passcode and
													sends it to the  phone associated with the account.</para>
											</listitem>
											
										</varlistentry>
										<varlistentry>
											<term><guilabel>SMS text messages</guilabel></term>
											<listitem>
												<para>During the multifactor authentication process, the verification 
													service sends text messages to a user's multifactor-enabled device in response to API requests and state 
													changes such as Send verification code; send authentication passcode; and too many authentication attempts. 
													These messages are managed by Service Administrators and can be customized upon request.</para>
											</listitem>
											
										</varlistentry>
									</variablelist>
								</para>
							</listitem>
						</varlistentry>
					</variablelist><variablelist>
						<varlistentry>
							<term><guilabel>Authentication settings for
								Token</guilabel></term>
							<listitem>
								<para>Authentication settings extend the Tokens resource to
									add support for multifactor authentication.<variablelist>
										<varlistentry>
											<term><guilabel>RAX-AUTH:PasscodeCredentials</guilabel></term>
											<listitem>
												<para>The RAX-AUTH:PasscodeCredentials element contains the
													<parameter>passcode</parameter> attribute that can be used to return the
													passcode from the Rackspace verification service to &CIS; to complete the
													multifactor authentication process.</para>
											</listitem>
										</varlistentry>
										<varlistentry>
											<term><guilabel>RAX-AUTH:authenticatedBy</guilabel></term>
											<listitem>
												<para>This element returns attributes that describe the type of credentials used
													to generate the authentication token. The value can be any of the following: <itemizedlist>
														<listitem>
															<para>PASSWORD indicates the Rackspace Cloud account password
																credentials.</para>
														</listitem>
														<listitem>
															<para>APIKEY indicates API key credentials. </para>
														</listitem>
														<listitem>
															<para>RSAKey indicates RSA key credentials.</para>
														</listitem>
														<listitem>
															<para>PASSCODE indicates the multifactor authentication passcode
																credentials (RAX-AUTH: Passcode credentials).</para>
														</listitem>
													</itemizedlist> When a user successfully authenticates by using a
													multifactor-enabled device, the <parameter>authenticatedBy</parameter> element
													lists two credential types; the type used for the initial authentication to
													the Identity service, and PASSCODE for the multifactor authentication
													step.</para>
											</listitem>
										</varlistentry>
									</variablelist></para>
							</listitem>
						</varlistentry>
					</variablelist>
				</para>
			</section> -->
		</section>
</chapter>
