<?xml version="1.0" encoding="UTF-8"?>
<!-- Import Common XML Entities -->
<!-- -->
<!-- You can resolve the entites with xmllint -->
<!-- -->
<!-- xmllint -noent RAX-AUTH.wadl -->
<!--*******************************************************-->
<!DOCTYPE application[
<!ENTITY % common SYSTEM "../common/common.ent">
    %common;
]>

<application 
    xmlns="http://wadl.dev.java.net/2009/02" 
    xmlns:identity="http://docs.openstack.org/identity/api/v2.0" 
    xmlns:RAX-AUTH="http://docs.rackspace.com/identity/api/ext/RAX-AUTH/v1.0"
    xmlns:wadl="http://wadl.dev.java.net/2009/02"
    xmlns:resource_type="http://wadl.dev.java.net/2009/02" 
    xmlns:policy="http://docs.rackspace.com/identity/policy/v1.0" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
    xmlns:db="http://docbook.org/ns/docbook" 
    xmlns:capi="http://docs.openstack.org/common/api/v1.0"
    xmlns:xsdxt="http://docs.rackspacecloud.com/xsd-ext/v1.0">


    <grammars>
        <include href="../common/xsd/RAX-AUTH.xsd"/>
    </grammars>

    <!-- ======================================================================================= -->
    <!-- Resources -->
    <!-- ======================================================================================= -->

    <resources base="http://localhost:8080" xml:id="RAX-AUTH-v2">
        <resource id="version" path="/v2.0">

            <!-- TOKENS resource(s) -->
            <resource id="tokens" path="tokens"> 
                <method href="#authenticateAsRacker"/>
                <method href="#authenticateWithMultiFactor"/>
            </resource>


            <!-- USER ID RAX-AUTH resource(s) -->
            <resource id="userIdRAX" path="users/{userId}/RAX-AUTH">
                <!-- ADD_USER_SECRETQA resource(s) -->
                <!-- see also SECRETQA below -->
                <resource id="add_user_secretqa" path="secretqas">
                    <param name="X-Auth-Token" style="header" type="xsd:string" required="true">
                        <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A valid authentication token</para></wadl:doc>
                    </param>
                    <param name="userId" style="template" type="xsd:string" required="true">
                        <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A user ID assigned by system when user is added.</para></wadl:doc>
                    </param>
                    <method href="#saveSecretQA"/>
                    <method href="#getUserSecretQAs"/>
                </resource>
            </resource>
            
                <!-- USER_USER_ADMINS resource(s) -->
            <resource id="user_user_admins" path="users/{userId}/RAX-AUTH/admins">
                    <param name="X-Auth-Token" style="header" type="xsd:string" required="true">
                        <wadl:doc xmlns="http://docbook.org/ns/docbook">
                            <para>A valid authentication token</para></wadl:doc>
                    </param>
                    <param name="userId" style="template" type="xsd:string" required="true">
                        <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>The user ID assigned by system when user is added.</para></wadl:doc>
                    </param>
                    <method href="#getUserAdmin"/>
                </resource>
            
                <!-- USER_ACCESSIBLE_DOMAINS resource(s) -->
                <resource id="user_accessible_domains" path="domains">
                    <param name="X-Auth-Token" style="header" type="xsd:string" required="true">
                        <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A valid authentication token</para></wadl:doc>
                    </param>
                    <param name="userId" style="template" type="xsd:string" required="true">
                        <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A user ID assigned by system when user is added.</para></wadl:doc>
                    </param>
                    <method href="#getAccessibleDomainsForUser"/>
                    
                    <resource id="user_accessible_domain" path="{domainId}">
                        <param name="domainId" type="xsd:string" style="template" required="true">
                            <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A domain ID.</para></wadl:doc>
                        </param>
                        
                    <resource id="user_accessible_domain_endpoints" path="endpoints">
                            <method href="#getAccesibleDomainEndpointsForUser"/>
                        </resource>
                    </resource>
                </resource>
                
                <!-- MULTIFACTOR resource(s) -->
                    <resource id="bypass_codes" path="users/{userId}/RAX-AUTH/multi-factor/bypass-codes">
                        <param name="X-Auth-Token" style="header" type="xsd:string" required="true">
                            <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A valid authentication token.</para></wadl:doc>
                        </param>
                        <param name="userId" style="template" type="xsd:string">
                            <wadl:doc xmlns="http://docbook.org/ns/docbook">
                                <para>The unique, system-generated user ID for the user account to generate codes for.</para>
                            </wadl:doc>
                        </param>
                        <method href="#generateBypassCodes"/>
                </resource>
                <resource id="multifactor_unlock" path="users/{userId}/RAX-AUTH/multi-factor">
                    <param name="X-Auth-Token" style="header" type="xsd:string" required="true">
                        <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A valid authentication token.</para></wadl:doc>
                    </param>
                    <param name="userId" style="template" type="xsd:string">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">
                        <para>The unique, system-generated user ID for the user account to be unlocked.</para>
                    </wadl:doc>
                    </param>
                    <param name="unlock" style="template" type="xsd:boolean" required="false">
                        <wadl:doc xmlns="http://docbook.org/ns/docbook">
                            <para>A boolean value that indicates the lock status on a user account enabled 
                                for multi-factor authentication. To unlock an account, specify <code>unlock=true</code> 
                                in the Unlock operation request.</para>. </wadl:doc>
                    </param>
                    <method href="#unlockMultifactorForUser"/>
                </resource>
                
                <!-- MULTIFACTOR Mobile phones resource(s) -->
                
                <resource id="user_mobile_phones" path="users/{userId}/RAX-AUTH/multi-factor/mobile-phones">
                    <param name="X-Auth-Token" style="header" type="xsd:string" required="true">
                        <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A valid authentication token.</para></wadl:doc>
                    </param>
                    <param name="userId" style="template" type="xsd:string" required="true">
                        <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>The user id for the account.</para></wadl:doc>          
                    </param>
                           <method href="#createMobilePhone"/> 
                           <method href="#getMobilePhonesForUser"/>
                           <method href="#removeMultifactorForUser"/>
                           <method href="#updateMultifactorSettings"/>
                    <resource id="multifactor_vcode" path="{phoneId}/verificationcode">
                    <param name="phoneId" style="template" type="xsd:string" required="true">
                            <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>The ID for the phone associated with the user account.
                            </para></wadl:doc>          
                        </param>
                    <method href="#sendVerifyCode"/>
                    </resource>
                    <resource id="mfa_PIN" path="{phoneId}/verify">
                        <param name="phoneid" style="template" type="xsd:string" required="true">
                            <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>The unique system-generated ID assigned when a phone is added to an account.</para></wadl:doc>          
                        </param>   
                    <method href="#verifyDevice"/>                        
                    </resource>
                </resource>

            <!-- RESET_APIKEY_CREDENTIALS resource(s) -->
            <resource id="reset_apikey_credentials" path="users/{userId}/OS-KSADM/credentials/RAX-KSKEY:apiKeyCredentials/RAX-AUTH/reset">
                <param name="X-Auth-Token" style="header" type="xsd:string" required="true">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A valid authentication token</para></wadl:doc>
                </param>
                <param name="userId" style="template" type="xsd:string" required="true">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A user ID assigned by system when user is added.</para></wadl:doc>
                </param>
                <method href="#resetUserAPIKeyCredentials"/>
            </resource>

            <!-- ENDPOINT_TEMPLATES resource(s) -->
            <resource id="endpoint_templates" path="OS-KSCATALOG/endpointTemplates">
                <param name="X-Auth-Token" style="header" type="xsd:string" required="true">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A valid authentication token</para></wadl:doc>
                </param>
                <method href="#getEndpointTemplates"/>

                <resource id="endpoint_template" path="{endpointTemplateId}">
                    <param name="endpointTemplateId" type="xsd:string" style="template" required="true">
                        <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>An endpoint template Id</para></wadl:doc>
                    </param>

                    <resource id="endpoint_template_policies" path="RAX-AUTH/policies">
                        <method href="#getEndpointTemplatePolicies"/>
                        <method href="#updateEndpointTemplatePolicies"/>

                        <resource id="endpoint_template_policy" path="{policyId}">
                            <param name="policyId" type="xsd:string" style="template" required="true">
                                <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A policy Id</para></wadl:doc>
                            </param>
                            <method href="#addPolicyToEndpointTemplate"/>
                            <method href="#removePolicyFromEndpointTemplate"/>
                        </resource>
                    </resource>
                </resource>
            </resource>

            <!-- RAX-AUTH resource(s) -->
            <resource id="RAX-AUTH" path="RAX-AUTH">

                <!-- IMPERSONATION resource(s) -->
                <resource id="impersonation-tokens" path="impersonation-tokens">
                    <param name="X-Auth-Token" style="header" type="xsd:string" required="true">
                        <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A valid authentication token for the impersonator</para></wadl:doc>
                    </param>
                    <method href="#impersonateUser"/>
                </resource>
          
                <!-- FEDERATION resource(s) -->
                <resource id="federation" path="saml-tokens">
                    <method href="#getTokenBySAML"/>
                </resource>

                <!-- DEFAUTLT REGIONS resource(s) -->
                <resource id="default-region-services" path="default-region/services">
                    <param name="X-Auth-Token" style="header" type="xsd:string" required="true">
                        <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A valid authentication token</para></wadl:doc>
                    </param>
                    <method href="#getDefaultRegionServices"/>
                    <method href="#setDefaultRegionServices"/>
                </resource>

                <!-- DOMAINS resource(s) -->
                <resource id="domains" path="domains">
                    <param name="X-Auth-Token" style="header" type="xsd:string" required="true">
                        <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A valid authentication token</para></wadl:doc>
                    </param>
                    <method href="#getDomains"/>
                    <method href="#createDomain"/>

                    <resource id="domain" path="{domainId}">
                        <param name="domainId" type="xsd:string" style="template" required="true">
                            <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A domain ID.</para></wadl:doc>
                        </param>
                        <method href="#getDomain"/>
                        <method href="#updateDomain"/>
                        <method href="#deleteDomain"/>

                        <resource id="domain_users" path="users">
                            <method href="#getDomainUsers"/>

                            <resource id="domain_user" path="{userId}">
                                <param name="userId" style="template" type="xsd:string" required="true">
                                    <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A user ID assigned by system when user is added.</para></wadl:doc>
                                </param>
                                <method href="#addUserToDomain"/>
                            </resource>
                        </resource>

                        <resource id="domain_tenants" path="tenants">
                            <method href="#getDomainTenants"/>

                            <resource id="domain_tenant" path="{tenantId}">
                                <param name="tenantId" type="xsd:string" style="template" required="true">
                                    <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A tenant, or account, ID.</para></wadl:doc>
                                </param>
                                <method href="#addTenantToDomain"/>
                            </resource>
                        </resource>

                        <resource id="domain_endpoints" path="endpoints">
                            <method href="#getDomainEndpoints"/>
                        </resource>
                    </resource>
                </resource>

                <!-- POLICIES resource(s) -->
                <resource id="policies" path="policies">
                    <param name="X-Auth-Token" style="header" type="xsd:string" required="true">
                        <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A valid authentication token. </para></wadl:doc>
                    </param>
                    <method href="#getPolicies"/>
                    <method href="#createPolicy"/>

                    <resource id="policy" path="{policyId}">
                        <param name="policyId" type="xsd:string" style="template" required="true">
                            <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A policy ID</para></wadl:doc>
                        </param>
                        <method href="#getPolicy"/>
                        <method href="#updatePolicy"/>
                        <method href="#deletePolicy"/>

                        <resource id="policyBlob" path="blob_detail">
                            <method href="#getPolicyBlob"/>
                        </resource>
                    </resource>
                </resource>

                <!-- REGIONS resource(s) -->
                <resource id="regions" path="regions">
                    <param name="X-Auth-Token" style="header" type="xsd:string" required="true">
                        <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A valid authentication token</para></wadl:doc>
                    </param>
                    <method href="#getRegions"/>
                    <method href="#createRegion"/>

                    <resource id="region" path="{regionId}">
                        <param name="regionId" type="xsd:string" style="template" required="true" default="false">
                            <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A region ID</para></wadl:doc>
                        </param>
                        <method href="#getRegion"/>
                        <method href="#updateRegion"/>
                        <method href="#deleteRegion"/>
                    </resource>
                </resource>

                <!-- SECRETS resource(s) -->
                <!-- see also ADD_USER_SECRETQA above -->
                <resource id="secretqa" path="secretqa">

                    <resource id="questions" path="questions">
                        <param name="X-Auth-Token" style="header" type="xsd:string" required="true">
                            <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A valid authentication token</para></wadl:doc>
                        </param>
                        <method href="#getQuestions"/>
                        <method href="#createQuestion"/>
                        <resource id="question" path="{questionId}">
                            <param name="questionId" type="xsd:string" style="template" required="true">
                                <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A question ID</para></wadl:doc>
                            </param>
                            <method href="#getQuestion"/>
                            <method href="#updateQuestion"/>
                            <method href="#deleteQuestion"/>
                        </resource>
                    </resource>
                </resource>

                <!-- SERVICE_APIS resource(s) -->
                <resource id="service_apis" path="service-apis">
                    <param name="X-Auth-Token" style="header" type="xsd:string" required="true">
                        <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A valid authentication token</para></wadl:doc>
                    </param>
                    <method href="#getServiceApis"/>

                    <resource id="service_api_capabilities" path="{type}/{version}/capabilities">
                        <param name="type" type="xsd:string" style="template" required="true">
                            <wadl:doc xmlns="http://docbook.org/ns/docbook">
                                <para>The service type, compute, object-store, and rax-dns for example.</para>
                            </wadl:doc>
                        </param>
                        <param name="version" type="xsd:string" style="template" required="true">
                            <wadl:doc xmlns="http://docbook.org/ns/docbook">
                                <para>
                                    The service version, v1 or v2.0 for example.
                                </para>>
                            </wadl:doc>
                        </param>

                        <method href="#getCapabilities"/>
                        <method href="#updateCapabilities"/>
                        <method href="#removeCapabilities"/>
                    </resource>
                </resource>
            </resource>
        </resource>
       </resources>

    <!-- ======================================================================================= -->
    <!-- Methods -->
    <!-- ======================================================================================= -->
    <method id="saveSecretQA" name="POST">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Add secret question to a user account">
            <para role="shortdesc">Adds a secret question and answer to a user account.</para>
            <para>The Identity service provides a list of security questions that can be used to verify account access.
                Administrators and users can add one of these questions to a user account with a unique answer that 
                can be used to confirm identity before granting access to the 
                account or account information. Users can only add a security question to their own account.</para>
            <para>If the account already has a secret question and answer, this operation replaces the existing information with the values 
                specified in the request body.</para>
                <tip>
                    <para>Use the Get questions API operation to list the available questions and associated IDs.
                    </para>
                </tip>
        </wadl:doc>
        <request>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN">
                    <xsdxt:code href="../common/samples/SecretQAForSave.xml"/>
                </wadl:doc>
                <param name="id" style="plain" type="xsd:string" required="true">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN">
                        <para>The ID of the secret question to add to the account.</para>
                    </wadl:doc>
                </param>
                <param name="answer" style="plain" type="xsd:string" required="true">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>The answer that the user can provide to verify an account.</para>
                    </wadl:doc>
                </param>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/SecretQAForSave.json"/>
                </wadl:doc>
            </representation>
        </request>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="OK">The request succeeded.</doc>
        </response>
        <response status="409" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="Conflict">The request could not be completed due to a conflict with the current state of the resource.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element"/>
            <representation mediaType="application/json"/>
        </response> &commonFaults; &postPutFaults; </method>

    <method id="getUserSecretQAs" name="GET">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Get user secret Q&amp;A list">
            <para role="shortdesc">Returns the list of secret questions and answers for a user account.</para>
        </wadl:doc>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="OK">The request succeeded.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/SecretQAList.xml"/>
                </wadl:doc>
                <param name="questions" style="plain" type="RAX-AUTH:Questions" required="true">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN">
                        <para>An object that contains the collection of secret questions that can be added to user accounts.</para>
                    </wadl:doc>
                </param>
                <param name="question" style="plain" type="RAX-AUTH:Question" required="true">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN">
                        <para>An object that contains the ID and text for a secret question.</para>
                    </wadl:doc>
                </param>
                <param name="id" style="plain" type="xsd:string" required="true">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>The unique system-generated ID assigned when the question was created.</para>
                    </wadl:doc>
                </param>
                <param name="question" style="plain" type="xsd:string" required="true">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>The text for the question.</para>
                    </wadl:doc>
                </param>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/SecretQAList.json"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &getFaults; </method>

    <method id="resetUserAPIKeyCredentials" name="POST">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN" title="Reset API key for user">
            <para role="shortdesc">Resets the API Key for a specified user account.</para>para>
            <para>We recommend that you routinely reset passwords and API keys. 
                This API key reset operation returns the new API key for the user account. 
                Unlike updating the password, the API key reset does not revoke existing 
                tokens. Administrators can use the Revoke Token operation to invalidate 
                the token for a user.</para>
        </wadl:doc>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
                <doc title="OK">The request succeeded.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/ResetAPIKey.xml"/>
               </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                <xsdxt:code href="../common/samples/ResetAPIKey.json"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &getFaults; &postPutFaults; </method>

    <method id="impersonateUser" name="POST">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Impersonate user">
           <para class="shortdesc">Impersonates a specific user.</para>
            <para xmlns="http://docbook.org/ns/docbook">To impersonate a user, you must first authenticate as yourself. The
                response to this authentication request includes a current Racker token; you must already hold a
                service token. After you have authenticated and have the necessary privileges, issue this
                impersonation call with your Racker token, identifying the <code>username</code> you wish to impersonate.</para>
            
            <para xmlns="http://docbook.org/ns/docbook">You can specify the number of seconds you want the impersonation to
                remain valid. For example, <code>&lt;expire-in-seconds&gt;10800&lt;/expire-in-seconds&gt;</code> asks for
                10,800 seconds (180 minutes, or 3 hours) of impersonation. Whether or not you requested a specific expiration
                time, your impersonation period will be limited. The response to your impersonation request will include the
                time at which the impersonation becomes invalid.</para>
            
            <itemizedlist>
                <listitem>
                    <para> In an impersonation <emphasis>request</emphasis>, express your request for time as a number of
                        seconds </para>
                </listitem>
                <listitem>
                    <para> In an impersonation <emphasis>response</emphasis>, the expiration time granted to you is expressed
                        as a timestamp. </para>
                </listitem>
            </itemizedlist>
            
            <para xmlns="http://docbook.org/ns/docbook"> A successful impersonation request returns a token and an expiration
                time for that token. You can impersonate <code>username</code> by supplying that token in other requests,
                until the token expires.</para>
            </wadl:doc>
        <request>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/ImpersonationRequest.xml"/>
               </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/ImpersonationRequest.json"/>
                </wadl:doc>
            </representation>
        </request>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
                <doc title="OK">The request succeeded.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/ImpersonationResponse.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/ImpersonationResponse.json"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &getFaults; &postPutFaults; </method>

    <method id="getDomains" name="GET">
        <wadl:doc xmlns="http://docbook.org/ns/docbook"
 title="Get domains">
            <para role="shortdesc"> Gets a list of domains. </para>
            <para> The operation returns a list of domains for which the supplied token provides access. Tokens have
                access to domains by the token having access to a tenant that exists in the domain. If the token belongs to
                an admin user, a list of all domains may be returned. </para>
        </wadl:doc>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
                <doc title="OK">The request succeeded.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/DomainList.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/DomainList.json"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &getFaults; </method>
    
    <method id="getDomain" name="GET">
        <wadl:doc xmlns="http://docbook.org/ns/docbook"
 title="Get a domain">
            <para role="shortdesc"> Get a domain. </para>
        </wadl:doc>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
                <doc title="OK">The request succeeded.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/Domain.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/Domain.json"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &getFaults; </method>

    <method id="updateDomain" name="PUT">
        <wadl:doc xmlns="http://docbook.org/ns/docbook"
 title="Update a domain">
            <para role="shortdesc"> Update a domain. </para>
        </wadl:doc>
        <request>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/Domain.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/Domain.json"/>
                </wadl:doc>
            </representation>
        </request>
        <response status="204" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="No content">The request succeeded. The server fulfilled the request but does not need to return a body.</doc>
            <representation mediaType="application/xml" element="identity:noContent"/>
            <representation mediaType="application/json"/>
        </response> &commonFaults; &getFaults; &postPutFaults; </method>

    <method id="createDomain" name="POST">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Create a domain">
            <para role="shortdesc">Create a domain.</para>
            <para> Clients must specify the domain ID in the request body. </para>
        </wadl:doc>
        <request>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/Domain.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/Domain.json"/>
                </wadl:doc>
            </representation>
        </request>
        <response status="201" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="Created">The request has been fulfilled. The domain has been created.</doc>
        </response> &commonFaults; &postPutFaults; </method>

    <method id="deleteDomain" name="DELETE">
        <wadl:doc xmlns="http://docbook.org/ns/docbook"
 title="Delete a domain">
            <para role="shortdesc"> Delete a domain. </para>
            <para>This operation fails unless no entities such as users and tenants exist in this domain. Only an empty
                domain can be deleted.</para>
        </wadl:doc>
        <response status="204" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="No content">The request succeeded. The server fulfilled the request but does not need to return a body.</doc>
            <representation mediaType="application/xml" element="identity:noContent"/>
            <representation mediaType="application/json"/>
        </response> 
        &commonFaults; 
        &getFaults; </method>

    <method id="getDomainUsers" name="GET">
        <wadl:doc xmlns="http://docbook.org/ns/docbook"
 title="Get users in domain">
            <para role="shortdesc"> Get users in a domain. </para>
        </wadl:doc>
        <request>
            <param name="enabled" style="query" type="xsd:string">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">     
                    <para>A boolean value that filters the list of tenants based on account status.
                        Specify <code>enabled=true</code> to list active (enabled) tenants; specify
                        <code>enabled=false</code> to list inactive tenants.
                    </para>              
                </wadl:doc>
            </param>
        </request>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
                <doc title="OK">The request succeeded.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/UserList.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook"
>
                    <xsdxt:code href="../common/samples/UserList.json"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &getFaults; </method>

    <method id="addUserToDomain" name="PUT">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Add user to domain">
            <para role="shortdesc"> Add a user to a domain. </para>
            <para> A user can exist in only one domain at a time. When you add a user to a domain, the user is
                automatically removed from any prior domain. </para>
        </wadl:doc>
        <response status="204" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="No content">The request succeeded. The server fulfilled the request but does not need to return a body.</doc>
            <representation mediaType="application/xml" element="identity:noContent"/>
            <representation mediaType="application/json"/>
        </response> &commonFaults; &getFaults; &postPutFaults; </method>

    <method id="getDomainTenants" name="GET">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Get tenants in domain">
            <para role="shortdesc"> Get tenants in a domain. </para>
            <para> Tenants can be used to create logical organization within a domain. For example, an entertainment
                business might use two tenants to separately identify resources related to two kinds of activity: manage Star Wars
                games and manage Star Wars pictures.</para>
        </wadl:doc>
        <request>
            <param name="enabled" style="template" type="xsd:string">
                <wadl:doc xmlns="http://docbook.org/ns/docbook"> 
                    <para>A boolean value that filters the list of tenants based on account status.
                        Specify <code>enabled=true</code> to list active (enabled) tenants; specify
                        <code>enabled=false</code> to list inactive tenants.
                    </para> 
                </wadl:doc>
            </param>
        </request>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
                <doc title="OK">The request succeeded.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/TenantList.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/TenantList.json"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &getFaults; </method>

    <method id="addTenantToDomain" name="PUT">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Add tenant to domain">
            <para role="shortdesc"> Add a tenant to a domain. </para>
            <para> A tenant can only exist in one domain at a time. When you add a tenant to a domain, the tenant is
                automatically removed from any prior domain. </para>
        </wadl:doc>
        <response status="204" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="No content">The request succeeded. The server fulfilled the request but does not need to return a body.</doc>
            <representation mediaType="application/xml" element="identity:noContent"/>
            <representation mediaType="application/json"/>
        </response> &commonFaults; &getFaults; &postPutFaults; </method>

    <method id="removeTenantFromDomain" name="DELETE">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Remove tenant from domain">
            <para role="shortdesc"> Remove a tenant from a domain. </para>
        </wadl:doc>
        <response status="204" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="No content">The request succeeded. The server fulfilled the request but does not need to return a body.</doc>
            <representation mediaType="application/xml" element="identity:noContent"/>
            <representation mediaType="application/json"/>
        </response> &commonFaults; &getFaults; &postPutFaults; </method>

    <method id="setDefaultRegionServices" name="PUT">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Set default region services">
            <para role="shortdesc">Sets the list of services that restrict the default regions their users can set.</para>
            
            <para xmlns="http://docbook.org/ns/docbook">Users can modify their own default regions, but only within limits.
                Those limits are imposed by the services in the user's service catalog. Each service specifies the default
                region for its users. For example, if the <code>openstackNova</code> service sets its default region to
                    <code>ORD</code>, then any user whose service catalog includes the <code>openstackNova</code> service can
                only set their default region to <code>ORD</code>.</para>
        </wadl:doc>
        <request>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/DefaultRegionServices.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/DefaultRegionServices.json"/>
                </wadl:doc>
            </representation>
        </request>
        <response status="204" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="No content">The request succeeded. The server fulfilled the request but does not need to return a body.</doc>
            <representation mediaType="application/xml" element="identity:noContent"/>
            <representation mediaType="application/json"/>
        </response> &commonFaults; &getFaults; &postPutFaults; </method>

    <method id="getDefaultRegionServices" name="GET">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Get default region services">
            <para role="shortdesc"> Gets the list of services that restrict the default regions their users can set.
            </para>
        </wadl:doc>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="OK" xml:lang="EN">The request succeeded.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/DefaultRegionServices.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/DefaultRegionServices.json"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &getFaults; </method>

    <method id="getAccessibleDomainsForUser" name="GET">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Get accessible domains">
            <para role="shortdesc"> Gets a list of accessible domains. </para>
            <para> The operation returns a list of domains to which the user has access. A user has access to a domains if
                the user has a role in a tenant that exists in the domain. </para>
        </wadl:doc>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="OK" xml:lang="EN">The request succeeded.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/DomainList.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/DomainList.json"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &getFaults; </method>

    <method id="getAccesibleDomainEndpointsForUser" name="GET">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Get accessible domain endpoints">
            <para role="shortdesc"> Get endpoints for a user restricted by domain. </para>
        </wadl:doc>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="OK" xml:lang="EN">The request succeeded.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/EndpointList.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/EndpointList.json"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &getFaults; </method>
    
    <method id="getDomainEndpoints" name="GET">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Get endpoints for domain">
            <para role="shortdesc"> Get endpoints restricted to a domain. </para>
            <para>This operation returns a list of domain endpoints for which the supplied token provides access. If a token 
                has access to a tenant that exists in the domain, then the token has access to the domain.  If the token belongs 
                to an admin user, a list of all domain endpoints may be returned. </para>
        </wadl:doc>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="OK" xml:lang="EN">The request succeeded.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/EndpointList.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/EndpointList.json"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &getFaults; </method>

    <method id="getUserAdmin" name="GET">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Get user admin">
            <para role="shortdesc"> Get the user admininistrator or point of contact for an account</para>
            <para>Account users with the <parameter>identity:user-admin</parameter> or 
                <parameter>identity:default</parameter> role can use this operation to identify the administrator or point of contact for a user 
                account if they have questions or need assistance regarding user
                and/or role management. This request returns the following identifying information about the administrator: domain name, domain ID, email address, status, user ID and user name.</para>
        </wadl:doc>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="OK" xml:lang="EN">The request succeeded.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/UserAdminList.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/UserAdminList.json"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &getFaults; </method>

    <method id="getPolicies" name="GET">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Get all policies">
            <para role="shortdesc"> Get all Policies. </para>
        </wadl:doc>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="OK" xml:lang="EN">The request succeeded.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/PolicyList.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/PolicyList.json"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &getFaults; </method>

    <method id="createPolicy" name="POST">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Create a policy">
            <para role="shortdesc"> Create a policy. </para>
        </wadl:doc>
        <request>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/UpdatePolicy.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/UpdatePolicy.json"/>
                </wadl:doc>
            </representation>
        </request>
        <response status="201" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="Created">The request has been fulfilled. The policy has been created.</doc>
            <param name="Location" style="header" type="xsd:string" required="true">
                <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>Location of the URI of the newly-created policy</para></wadl:doc>
            </param>
        </response> &commonFaults; &postPutFaults; </method>

    <method id="getPolicy" name="GET">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Get a policy">
            <para role="shortdesc"> Gets a policy. </para>
        </wadl:doc>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="OK" xml:lang="EN">The request succeeded.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/Policy.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/Policy.json"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &getFaults; </method>

    <method id="updatePolicy" name="PUT">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Update a policy">
            <para role="shortdesc"> Update a Policy. </para>
        </wadl:doc>
        <request>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/UpdatePolicy.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/UpdatePolicy.json"/>
                </wadl:doc>
            </representation>
        </request>
        <response status="204" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="No content">The request succeeded. The server fulfilled the request but does not need to return a body.</doc>
            <representation mediaType="application/xml" element="identity:noContent"/>
            <representation mediaType="application/json"/>
        </response> &commonFaults; &getFaults; </method>

    <method id="deletePolicy" name="DELETE">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Delete a policy">
            <para role="shortdesc"> Delete a policy. </para>
            <para> A policy can only be deleted if it is not tied to any entity. </para>
        </wadl:doc>
        <response status="204" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="No content">The request succeeded. The server fulfilled the request but does not need to return a body.</doc>
            <representation mediaType="application/xml" element="identity:noContent"/>
            <representation mediaType="application/json"/>
        </response> &commonFaults; &getFaults; &postPutFaults; </method>

    <method id="getPolicyBlob" name="GET">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Get detailed policy content">
            <para role="shortdesc"> Gets a policy content. </para>
            <para> The representation of the policy is different from the author's perspective and the policy enforcer's
                perspective. This API is intended for policy enforcers; it gives clear, fully detailed, non-verbose
                descriptions of the policy. </para>
        </wadl:doc>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="OK" xml:lang="EN">The request succeeded.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/PolicyBlob.xml"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &getFaults; </method>

    <method id="getEndpointTemplatePolicies" name="GET">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Get policies">
            <para role="shortdesc"> Get all policies for endpoint template. </para>
        </wadl:doc>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="OK" xml:lang="EN">The request succeeded.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/PolicyList.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/PolicyList.json"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &getFaults; </method>

    <method id="updateEndpointTemplatePolicies" name="PUT">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Update policies">
            <para role="shortdesc"> Update all policies for endpoint template </para>
            <para> This allows clients to update all the policies for an endpoint template at once. </para>
        </wadl:doc>
        <request>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/UpdatePolicyList.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/UpdatePolicyList.json"/>
                </wadl:doc>
            </representation>
        </request>
        <response status="204" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="No content">The request succeeded. The server fulfilled the request but does not need to return a body.</doc>
            <representation mediaType="application/xml" element="identity:noContent"/>
            <representation mediaType="application/json"/>
        </response> &commonFaults; &getFaults; </method>

    <method id="addPolicyToEndpointTemplate" name="PUT">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Add policy">
            <para role="shortdesc"> Add a Policy to an endpoint template. </para>
        </wadl:doc>
        <response status="204" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="No content">The request succeeded. The server fulfilled the request but does not need to return a body.</doc>
            <representation mediaType="application/xml" element="identity:noContent"/>
            <representation mediaType="application/json"/>
        </response> &commonFaults; &getFaults; &postPutFaults; </method>

    <method id="removePolicyFromEndpointTemplate" name="DELETE">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Remove policy">
            <para role="shortdesc"> Remove a policy from an endpoint template. </para>
        </wadl:doc>
        <response status="204" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="No content">The request succeeded. The server fulfilled the request but does not need to return a body.</doc>
            <representation mediaType="application/xml" element="identity:noContent"/>
            <representation mediaType="application/json"/>
        </response> &commonFaults; &getFaults; &postPutFaults; </method>

    <method id="getServiceApis" name="GET">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Get service APIs">
            <para role="shortdesc"> Gets a list of service APIs. </para>
        </wadl:doc>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="OK" xml:lang="EN">The request succeeded.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/ServiceApiList.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/ServiceApiList.json"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &getFaults; </method>

    <method id="getCapabilities" name="GET">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Get capabilities">
            <para role="shortdesc"> Get the capabilities for an endpoint template. </para>
        </wadl:doc>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="OK" xml:lang="EN">The request succeeded.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/CapabilityList.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/CapabilityList.json"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &getFaults; </method>

    <method id="updateCapabilities" name="PUT">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Update capabilities">
            <para role="shortdesc"> Update the capabilities for a Service API. </para>
            <para>Any capabilities that previously existed for this endpoint template will be overridden. There will be
                future support to update capabilities by specifying a WADL as the payload. A WADL describes all the
                capabilities that can exist for a service. </para>
        </wadl:doc>
        <!-- 
          in https://github.rackspace.com/ServiceAPIContracts/global-auth-keystone-extensions/blob/master/src/wadl/RAX-AUTH.wadl,
          this says <request status="200"> but how does that work? try again as <request>
         -->
        <request>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/CapabilityList.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/CapabilityList.json"/>
                </wadl:doc>
            </representation>
        </request>
        <response status="204" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="No content">The request succeeded. The server fulfilled the request but does not need to return a body.</doc>
            <representation mediaType="application/xml" element="identity:noContent"/>
            <representation mediaType="application/json"/>
        </response> &commonFaults; &getFaults; &postPutFaults; </method>

    <method id="removeCapabilities" name="DELETE">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Remove capabilities">
            <para role="shortdesc"> Remove capabilities from an endpoint template. </para>
        </wadl:doc>
        <response status="204" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="No content">The request succeeded. The server fulfilled the request but does not need to return a body.</doc>
            <representation mediaType="application/xml" element="identity:noContent"/>
            <representation mediaType="application/json"/>
        </response> &commonFaults; &getFaults; &postPutFaults; </method>

    <method id="getRegions" name="GET">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Get regions">
            <para role="shortdesc"> Gets a list of regions. </para>
            <para> The operation returns a list of regions. </para>
        </wadl:doc>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="OK" xml:lang="EN">The request succeeded.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/RegionList.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/RegionList.json"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &getFaults; </method>

    <method id="getRegion" name="GET">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Get a region">
            <para role="shortdesc"> Gets a region. </para>
        </wadl:doc>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="OK" xml:lang="EN">The request succeeded.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/Region.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/Region.json"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &getFaults; </method>

    <method id="updateRegion" name="PUT">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Update a region">
            <para role="shortdesc"> Updates a region. </para>
        </wadl:doc>
        <request>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/Region.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/Region.json"/>
                </wadl:doc>
            </representation>
        </request>
        <response status="204" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="No content">The request succeeded. The server fulfilled the request but does not need to return a body.</doc>
            <representation mediaType="application/xml" element="identity:noContent"/>
            <representation mediaType="application/json"/>
        </response> &commonFaults; &getFaults; &postPutFaults; </method>

    <method id="createRegion" name="POST">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Create a region">
            <para role="shortdesc"> Creates a region. </para>
            <para>Clients must specify the region name in the request body. </para>
            <para>Clients must specify whether or not the region is default in the request body. When a user is created,
                they are assigned the default region based on which region is set as “isDefault”:true. This is used to assist
                Next Gen Compute capacity by suggesting to new users that they provision where we want them to. The user can
                change their default region through the update user API call, but they are restricted to changing it only to
                one of their regions listed in the service catalog for the CloudServersOpenStack service. </para>
        </wadl:doc>
        <request>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/Region.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/Region.json"/>
                </wadl:doc>
            </representation>
        </request>
        <response status="201" xmlns="http://wadl.dev.java.net/2009/02">
        </response> &commonFaults; &postPutFaults; </method>

    <method id="deleteRegion" name="DELETE">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Delete a region">
            <para role="shortdesc"> Deletes a region. </para>
            <para>This request only succeeds if the region default is set to false. The default value must be false
                before this operation will be allowed.</para>
        </wadl:doc>
        <response status="204" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="No content">The request succeeded. The server fulfilled the request but does not need to return a body.</doc>
            <representation mediaType="application/xml" element="identity:noContent"/>
            <representation mediaType="application/json"/>
        </response> &commonFaults; &getFaults; </method>

    <method id="getQuestions" name="GET">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Get questions">
            <para role="shortdesc">Returns a list of secret questions that can be added to user accounts.</para>
            <para> The list includes secret questions and associated IDs required to manage questions by using the Identity 
                service API. questions.</para>
        </wadl:doc>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="OK" xml:lang="EN">The request succeeded.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/QuestionList.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/QuestionList.json"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &getFaults; </method>

    <method id="getQuestion" name="GET">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Get a question">
            <para role="shortdesc">Get a secret question by question ID.</para>
        </wadl:doc>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="OK" xml:lang="EN">The request succeeded.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/Question.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/Question.json"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &getFaults; </method>

    <method id="updateQuestion" name="PUT">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Update a question">
            <para role="shortdesc">Updates a question. </para>
            <para>Identity administrators can use this operation to modify the question associated with the specified question ID.</para>
        </wadl:doc>
        <request>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/Question.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/Question.json"/>
                </wadl:doc>
            </representation>
        </request>
        <response status="204" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="No content">The request succeeded. The server fulfilled the request but does not need to return a body.</doc>
            <representation mediaType="application/xml" element="identity:noContent"/>
            <representation mediaType="application/json"/>
        </response> &commonFaults; &getFaults; &postPutFaults; </method>

    <method id="createQuestion" name="POST">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Create a secret question">
            <para role="shortdesc">Creates a secret question that can be added to user accounts.</para>
            <para>Identity administrators can create security questions for account verification. 
            When the question is created, the Identity service assigns a unique question ID and returns the value in the LOCATION 
            field of the response header. You need the ID when you 
            submit API requests to update, delete, or assign the secret question to a user account. 
            </para>
        </wadl:doc>
        <request>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/QuestionForCreate.xml"/>
                </wadl:doc>
                    <param name="question" style="plain" type="xsd:string" required="true">
                        <wadl:doc xmlns="http://docbook.org/ns/docbook">
                            <para>Specifies the text for a secret question.</para>
                        </wadl:doc>
                    </param>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/QuestionForCreate.json"/>
                </wadl:doc>
            </representation>
        </request>
        <response status="201" xmlns="http://wadl.dev.java.net/2009/02">
            <param name="LOCATION" style="header" type="URI" required="true">
                <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>Location of the URI for the newly-created question that includes the question ID assigned by the Identity service.</para></wadl:doc>
            </param>
        </response>
        <response status="409" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="Conflict">The request could not be completed due to a conflict with the current state of the resource.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element"/>
            <representation mediaType="application/json"/>
        </response> &commonFaults; &postPutFaults; </method>

    <method id="deleteQuestion" name="DELETE">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Delete a question">
            <para role="shortdesc"> Delete a question. </para>
            <para>Identity administrators can remove a secret question by question ID. 
             If the question is associated with any user accounts, use the 
             You can remowith a user account, the operation fails. 
                The question must be removed from any users before this operation will be allowed. </para>
        </wadl:doc>
        <response status="204" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="No content">The request succeeded. The server fulfilled the request but does not need to return a body.</doc>
            <representation mediaType="application/xml" element="identity:noContent"/>
            <representation mediaType="application/json"/>
        </response> &commonFaults; &getFaults; </method>

    <method id="getEndpointTemplates" name="GET">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Get endpoint templates">
            <para role="shortdesc">Get users in a domain. </para>
        </wadl:doc>
        <request>
            <param name="serviceId" style="template" type="xsd:string">
                <wadl:doc xmlns="http://docbook.org/ns/docbook"><para> Allows us to filter by service id.</para></wadl:doc>
            </param>
            <param name="type" style="template" type="xsd:string">
                <wadl:doc xmlns="http://docbook.org/ns/docbook"><para> Allows us to filter by service type: compute, object-store, or rax:dns for example.</para></wadl:doc>
            </param>
            <param name="version" style="template" type="xsd:string">
                <wadl:doc xmlns="http://docbook.org/ns/docbook"><para> Allows us to filter by version.</para></wadl:doc>
            </param>
            <param name="region" style="template" type="xsd:string">
                <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>Allows us to filter by region. </para></wadl:doc>
            </param>
        </request>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="OK" xml:lang="EN">The request succeeded.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/EndpointTemplateList.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/EndpointTemplateList.json"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &getFaults; </method>

    <method id="authenticateWithMultiFactor" name="POST">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Authenticate with multifactor passcode credentials">
            <para role="shortdesc">Authenticate with multi-factor passcode credentials.</para><important>
                <para>User accounts that use multi-factor authentication must
                    authenticate with &CIS; version 2.0 or later. Attempts to
                    authenticate with earlier API versions will fail.</para>
            </important>
            <para>If an account is enabled for multi-factor authentication, authentication is a two-step process: 
                <orderedlist>
                    <listitem>
                        <para>Send an initial  with user name and password credentials. See 
                            <link xlink:href= "POST_authenticate_v2.0_tokens_Token_Calls.html">Authenticate as user with password or API key credentials</link>.</para>
                        <para>The request triggers &CIS; to send an SMS message to the phone 
                            associated with the user account. In response to the authentication request,  &CIS; 
                            returns a 401 message that includes 
                            a sessionId in the WWW-Authenticate header and a request for additional credentials.
                            <screen><computeroutput>&lt;HTTP/1.1 401 Unauthorized
* Server Apache-Coyote/1.1 is not blacklisted
&lt; Server: Apache-Coyote/1.1
&lt;vary:  Accept, Accept-Encoding, X-Auth-Token
&lt; WWW-Authenticate: OS-MF sessionId='APU9ymMBWY5W-pTgnHuZEvjKsM5oG_ler4lC0g_EkCPYvPdUBHK55RWtsgpL5RZ22AyDNaVCNCz6mlDOwbJAI-RLFQywI7CgOvjH0MLhL5a6D-c4cd1x8BbZmy8uT8ejm7jzBUX_vDZ5R0Hcia5DkOB80yWNJ8XVKMxVYLg5Qwp0TPA2zx-HQOTM3xqVQE63u1mYDUqikrXQ', factor='PASSCODE'
&lt;Content-Type: application/json
&lt;Transfer-Encoding: chunked
&lt; Date: Thu, 13 Mar 2XXX 21:10:50 GMT
{ [data not shown]
100   186    0    96  100    90    159    149 --:--:-- --:--:-- --:--:--   159
* Connection #0 to host identity.api.rackspacecloud.com/v2.0 left intact
{
"unauthorized": {
    "code": 401,
    "message": "Additional authentication credentials required."
    }
}
    {
    "key":"value"
    }</computeroutput></screen>
                            
                        </para>                        
                    </listitem>
                    <listitem>
                        <para>Send an additional authentication request providing the sessionId and multi-factor authentication 
                            passcode included in the SMS message from &CIS; verification service.
                        </para>
                    </listitem>
                </orderedlist></para>
        </wadl:doc>
        <request>
            <representation mediaType="text/xml">
                <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Authenticate with multi-factor credentials: XML request with header">
                    <xsdxt:code href="../common/samples/MultiFacAuthReqWithHeader.xml"/>
                </wadl:doc>           
            </representation>
            <representation mediaType="text/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Authenticate with multifactor credentials: JSON request with header">
                    <xsdxt:code href="../common/samples/MultiFacAuthReqWithHeader.json"/>
                </wadl:doc>       
            </representation>
        </request>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="OK">The request succeeded.</doc>
            <representation mediaType="text/xml">
                <doc xml:lang="EN" title="Authenticate with multifactor credentials: XML response with header">
                    <xsdxt:code href="../common/samples/MultiFacAuthRespWithHeader.xml"/>
                </doc>           
            </representation>
            
            <representation mediaType="text/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Authenticate with multi-factor credentials: JSON response with header">
                    <xsdxt:code href="../common/samples/MultiFacAuthRespWithHeader.json"/>
                </wadl:doc>           
            </representation>
        </response>
        <response status="401" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="Unauthorized" xml:lang="EN">Unauthorized error can occur if the passcode is not valid, or if the user 
                account is locked because the user has exceeded the maximum number of attempts to authenticate. Use the Unlock user account operation to 
                remove the account lock.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element"/>
            <representation mediaType="application/json"/>
        </response>
        
        <response status="403" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="User Disabled" xml:lang="EN">User account has been disabled.
            </doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element"/>
            <representation mediaType="application/json"/>
        </response>
        
        <response status="500" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="serviceFault" xml:lang="EN">Passcode not accepted.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element"/>
            <representation mediaType="application/json"/>
        </response> &postPutFaults; 
    </method>
    <method id="authenticateAsRacker" name="POST">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Authenticate as a Racker">
            <para role="shortdesc">Authenticate using Racker credentials.</para>
            <para>Rackers can use the <command>POST tokens</command> operation to authenticate to the Identity 
                service by supplying the following information in the request: Rackspace username, 
                SSO password, and the Rackspace domain ID.</para>
            <para>When you authenticate, the Identity Service 
                validates the authentication request through the internal Rackspace eDirectory (eDir) service, maps your Racker credentials to the Identity 
               service roles and permissions, and returns an authentication response with a token granting the corresponding access rights and permissions.</para>
            <para>User, group, and role configuration for Racker accounts is managed through 
                the eDir service. You can view, manage, and submit eDir service 
                requests by using either of these resources: 
               <itemizedlist>
                    <listitem>
                        <para>View and manage your Racker account credentials and submit service requests by using   
                            <link xlink:href="https://rackerapp.rackspace.com:8443/IDMProv/portal/cn/GuestContainerPage/Welcome">RackerApp</link>.</para>
                    </listitem>
                    <listitem>
                        <para>For access and permission requests, submit a ticket 
                            from the <link xlink:href="https://rackspace.service-now.com/ess/sd_order_rack_group.do">
                            Access and Permissions</link> section of the Rackspace Service Desk portal.   
                        </para>
                    </listitem> 
                </itemizedlist>
            </para>
            <note><title>Notes</title>
            <itemizedlist>
                <listitem>
                    <para>When you are authenticated as a Racker, you cannot create sub-user accounts 
                    because your account is not associated with a tenant.</para>
                </listitem>
                <listitem>
                    <para>Racker accounts do not use identity roles such as <code>identity:admin</code>, <code>identity:default</code>, 
                        <code>identity:user-admin</code>, and <code>identity:user-manage.</code> Racker account groups and permissions are managed 
                            through eDir gropus and mapped to Identity roles during the authentication process.
                    </para>
                </listitem> 
                <listitem>
                    <para>You cannot manage RBAC roles by using the role operations available in the Identity service API.
                        To add or change role assignments, submit a request through RackerApp or the Rackspace Service Desk.</para>
                </listitem>
                <listitem>
                    <para>If you use the same account to access the Rackspace Cloud staging environment and production systems, 
                        problems in the staging environment might cause failures in production.  For example, if your Racker 
                        account gets locked out in the staging environment, any production processes that use the same account 
                        will fail on authentication. To prevent issues like this, use different accounts in staging and production.
                     </para>
                </listitem>
            </itemizedlist></note>
        </wadl:doc>
        <request>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Racker SSO authentication request: XML">
                    <xsdxt:code href="../common/samples/RackerSSOAuthenticationRequest.xml"/>
                </wadl:doc>
                <param name="username" style="template" type="xsd:string" required="true">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">
                        <para>The Rackspace account user name.</para>
                    </wadl:doc>
                </param>
                <param name="password" style="template" type="xsd:string" required="true">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">
                        <para>The SSO password for the specified user account</para>
                    </wadl:doc>
                </param>
                <param name="RAX:AUTH:domain" style="plain" type="xsd:string" required="true">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">
                        <para>Specify the Rackspace domain name.<code>name="Rackspace"</code>.</para>
                    </wadl:doc>
                </param>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Racker SSO authentication request: JSON">
                    <xsdxt:code href="../common/samples/RackerSSOAuthenticationRequest.json"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook"
 title="Racker RSA token authentication request: XML">
                    <xsdxt:code href="../common/samples/RackerRSATokenAuthenticationRequest.xml"/>
              </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Racker RSA token authentication request: JSON">
                    <xsdxt:code href="../common/samples/RackerRSATokenAuthenticationRequest.json"/>
                </wadl:doc>
            </representation>
        </request>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/RackerAuthenticationResponse.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/RackerAuthenticationResponse.json"/>
               </wadl:doc>
            </representation>
        </response>
        <response status="409" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="Conflict">The request could not be completed due to a conflict with the current state of the resource.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element"/>
            <representation mediaType="application/json"/>
        </response> &commonFaults; &postPutFaults; </method>
    
    <method id="createMobilePhone" name="POST">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Add a mobile phone">
            <para role="shortdesc">Adds a mobile phone number to the specified user account to support multi-factor authentication.</para>
            <para>Updates the specified user account with a phone number for multi-factor authentication. 
            The same phone number can be associated with multiple accounts.</para>
            <para>Specify the phone number in 
                <link xlink:href="http://tools.ietf.org/html/rfc4517#ref-E.123">E.123 format</link>. 
                <code>+1 235-435-623</code> or <code>+44 42 1123 4567</code> for example.
             </para>
            <example><title>Add mobile phone cURL request</title>
            <programlisting language="bash" role="gutter: false"><?db-font-size 60%?>$ curl $AUTH_URL/v2.0/users/$USER_ID/RAX-AUTH/multi-factor/mobile-phones  \
       -X POST \
       -H "Content-Type: application/json" \
       -H "X-Auth-Token: $AUTH_TOKEN"
       -d '{"RAX-AUTH:mobilePhone": { "number": "+1 512-555-1000" }}' \ 
       | python -m json.tool</programlisting>
            </example>
            <note><para>This example assumes that the endpoint URL, userId, and authentication token have been exported to these environment variables: <code>AUTH_URL, USER_ID</code> and <code>AUTH_TOKEN</code>.</para></note>
      </wadl:doc>
        <request>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <param name="number" style="plain" type="xsd:string" required="true">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">
                        <para>The phone number of the mobile phone in <link xlink:href="http://tools.ietf.org/html/rfc4517#ref-E.123">E.123 format</link>. 
                            <code>+1 235-435-623</code>+1 235-435-623 or <code>+31 42 1123 4567</code> for example.</para>
                    </wadl:doc>
                </param>
                <xsdxt:code href="../common/samples/MultiFacCreatePhoneReq.xml"/>
            </representation>
            <representation mediaType="application/json" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Add mobile phone: JSON request">
                    <xsdxt:code href="../common/samples/MultiFacCreatePhoneReq.json"/>
                </wadl:doc>                
            </representation> 
        </request>
        
        <response status="201" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="Created">The request has been fulfilled. The mobile phone has been added.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Add a mobile phone: XML response">
                    <xsdxt:code href="../common/samples/MultiFacCreatePhoneResp.xml"/>
               </wadl:doc>
                <param name="id" style="plain" type="xsd:string" required="true">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>The unique system-generated ID assigned when a phone is added to an account.</para></wadl:doc>          
                </param>
                <param name="verified" style="plain" type="boolean" required="false">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook"><para>A boolean value that indicates whether the phone can be used to authenticate to the Identity service. Phones can be  
                        verified by using the Send verification code and Verify device operations.</para></wadl:doc>          
                </param>
                <param name="number" style="plain" type="xsd:string" required="true">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">
                        <para>The phone number for the mobile phone you want to add in <link xlink:href="https://www.itu.int/rec/T-REC-E.123-200102-I/en">E.123 format</link>. +1 235-435-623 or +44 42 1123 4567 for example.</para>
                    </wadl:doc>
                </param>
                
            </representation>
            <representation mediaType="application/json" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Add a moble phone: JSON response">
                    <xsdxt:code href="../common/samples/MultiFacCreatePhoneResp.json"/>
                </wadl:doc>
            </representation>
        </response> &commonFaults; &postPutFaults;
       </method>
    
    <method id="sendVerifyCode" name="POST">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Send verification code to a mobile phone">
            <para role="shortdesc">Sends a verification code to a mobile phone associated with a user account to verify that the user has the phone.</para>
            <para>Before a user can authenticate using a mobile phone, &CIS; must verify that the user 
                has the phone.
            </para>
            <para>When you send the verification code, include the <parameter>phoneId</parameter> in the API request. If you don't know the ID, use the 
                <link xlink:href="GET_getMobilePhonesForUser_v2.0_users__userId__RAX-AUTH_multi-factor_mobile-phones_Multifactor_Calls.html">List phones for user</link> 
                operation to get it.</para>
            <para>In response to the Send Verify operation request, the Rackspace verification service sends a PIN to the specified phone 
                via SMS text message. Each PIN has a system-defined expiration time determined by the &CIS; system configuration.
                The user can use the Verify device operation to submit the PIN to &CIS; and confirm 
                the phone for use with multi-factor authentication services. 
            </para>
        </wadl:doc>
        <request>
            <representation mediaType="application/json" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Send verification code: JSON request in a cURL command">
                    <programlisting language="bash" role="gutter: false"><?db-font-size 60%?>$ curl $AUTH_URL/v2.0/users/$USER_ID/RAX-AUTH/multi-factor/mobile-phones/$PHONE_ID/verificationcode \
       -X POST \
       -H "Content-Type: application/json" \
       -H "Accept: application/json" \
       -H "X-Auth-Token: $AUTH_TOKEN"
       | python -m json.tool</programlisting><note><para>This example assumes that the endpoint URL, userId, and your authentication token have been exported to
           environment variables.</para></note></wadl:doc>
            </representation>
        </request>
        <response status="202" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="Accepted" xml:lang="EN">The request was accepted for processing.</doc>
        </response>    
            &commonFaults; &getFaults;    
    </method>
    
    <method id="verifyDevice" name="POST">        
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Verify device">
            <para role="shortdesc">Submits a PIN code issued by Rackspace verification services to confirm user possession of a device.</para>
            <para>Use this operation to submit the verification PIN received in the SMS text message from the Rackspace verification 
                service. After the PIN is accepted, the user account is updated to indicate that the phone is verified. The phone can be used 
                to authenticate to &CIS; if the associated account has been enabled for multi-factor authentication. See the Enable multi-factor 
                authentication operation.</para>
            
            <para>When you send the verification code, include the <parameter>phoneId</parameter> in the API request. If you don't know the ID, use the 
                <link xlink:href="GET_getMobilePhonesForUser_v2.0_users__userId__RAX-AUTH_multi-factor_mobile-phones_Multifactor_Calls.html">List phones for user</link> 
                operation to get it.</para>

            <para>This operation can only be completed from the user account that the phone is associated with. The operation fails if
            the PIN is expired, or if it doesn't match the code issued by the Rackspace verification service.</para>
        </wadl:doc>
        
        <request>
            
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Verify device: XML request">
                    <xsdxt:code href="../common/samples/MultiFacVerifyDeviceReq.xml"/>
                </wadl:doc>
                <param name="code" style="plain" type="xsd:string" required="true">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">
                        <para>The unique PIN code from the SMS text message sent by the Rackspace Cloud verification service.</para>
                    </wadl:doc>
                </param>
            </representation>
            <representation mediaType="application/json" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Verify device: JSON request">
                    <xsdxt:code href="../common/samples/MultiFacVerifyDeviceReq.json"/>
                </wadl:doc>
            </representation>
        </request>
        
        <response status="204" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="No content">The request succeeded. The server fulfilled the request but does not need to return a body.</doc>
            <representation mediaType="application/xml" element="identity:noContent"/>
            <representation mediaType="application/json"/>
        </response> &commonFaults; &postPutFaults;     
    </method>
        
    <method id="getMobilePhonesForUser" name="GET">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="List phones for user">
            <para role="shortdesc">Lists phones associated with the specified user account.</para>
            <para>Use this operation to get the phone number, ID, and the multi-factor 
            verification status for all phones associated with the specified user.</para>
            <para>If you don't know the userId, use the List operation to find it.</para>
        </wadl:doc>
        <response status="204" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="No content">The request succeeded. The server fulfilled the request but does not need to return a body.</doc>
            <representation mediaType="application/json" element="RAX-AUTH:multi-factor">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/MultifacGetUserPhone_req.json"/>
                </wadl:doc>
        </representation>
            
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/MultifacGetUserPhone_req.xml"/>
                </wadl:doc>
                <param name="id" style="plain" type="xsd:string" required="true">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">
                        <para>A unique, system-generated string that identifies the mobile phone 
                            in the &CIS;.</para>
                    </wadl:doc>          
                </param>
                <param name="number" style="plain" type="xsd:string" required="true">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">
                        <para>Phone number of the device associated with the user account. Use the Add mobile phone operation 
                            to add a phone to the account. Use the Remove multi-factor operation to remove phones from the account.</para>
                    </wadl:doc>
                </param>
                <param name="verified" style="plain" type="boolean" required="false">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">
                        <para>A boolean value that indicates whether the phone can be used to authenticate to the Identity service. Phones can be  
                            verified by using the Send verification code and Verify device operations.</para>
                    </wadl:doc>
                </param>
            </representation>
        
        </response> &commonFaults; &getFaults;
    </method>
    
    <method id="removeMultifactorForUser" name="DELETE">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Remove mutlifactor authentication from account">
            <para role="shortdesc">Removes the multi-factor authentication setting and all associated 
                mobile phones from your user account.</para>
            <para>This operation removes the multi-factor authentication setting from your account along with 
                all phones associated with the account. To disable the feature without removing phones, use 
                the Disable multi-factor setting operation.</para>
            <para>This operation can only be completed from the user account submitting the request.
                Attempts to run it for a different userId result in a 403 error message.
            </para>
        </wadl:doc>
        <response status="204" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="No content">The request succeeded. The server fulfilled the request but does not need to return a body.</doc>
            <representation mediaType="application/xml" element="identity:noContent"/>
            <representation mediaType="application/json"/>
        </response> &commonFaults;
    </method>
     
    <method id="updateMultifactorSettings" name="PUT">
        <wadl:doc xmlns="http://docbook.org/ns/docbook"
            title="Update multi-factor authentication configuration on user account">
            <para role="shortdesc">Enables or disables the multi-factor authentication setting for the specified account.
            </para>
        </wadl:doc>
        <wadl:doc xmlns="http://docbook.org/ns/docbook">     
            <para>After verifying the first mobile phone number associated with a user account, use this operation  
                to enable multi-factor authentication. After the feature is enabled, users can authenticate to 
                &CIS; with any verified mobile phone number associated with their account.</para>
            <para>
                To disable multi-factor authentication temporarily, without removing associated 
                mobile phone numbers, run the Update mullti-factor authentication setting operation with <code>enable=false</code>. 
                To remove multi-factor authentication capabilities from an account completely, use the Remove multi-factor 
                operation.</para>
        </wadl:doc>
        <request>
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Enable account for multi-factor authentication: JSON request">
                    <xsdxt:code href="../common/samples/MultiFacUpdateSettingsReq.json"/>
                </wadl:doc>
            </representation>
            
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Enable account for multi-factor authentication: XML request">
                    <xsdxt:code href="../common/samples/MultiFacUpdateSettingsReq.xml"/>
                </wadl:doc>
                <param name="enabled" style="template" type="xsd:boolean" required="false">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">
                        <para>A boolean value that indicates whether the account is enabled for multi-factor authentication. 
                            Specify <code>enabled=true</code> to add support for multi-factor authentication; 
                            <code>enabled=false</code> to disable it.</para>
                        <para>This setting does not remove the phone associated with the account.</para>
                    </wadl:doc>
                </param>
            </representation>
            
            <representation mediaType="application/json">
                <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Disable multi-factor authentication on account: JSON request">
                    <xsdxt:code href="../common/samples/MultiFacUpdateOffReq.json"/>
                </wadl:doc>
            </representation>
            
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Disable multi-factor authentication on account: XML request">
                    <xsdxt:code href="../common/samples/MultiFacUpdateOffReq.xml"/>
                </wadl:doc>
            </representation>
        </request>
        <response status="204" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="No content">The request succeeded. The server fulfilled the request but does not need to return a body.</doc>
            <representation mediaType="application/xml" element="identity:noContent"/>
            <representation mediaType="application/json"/>
        </response>
        <response status="400" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="Bad Request">Possible reasons: No multifactor device on user account; multifactor phone on account is not verified.</doc>
            <representation mediaType="application/json"/>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element"/>
        </response>
        <response status="500" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="serviceFault">Problem linking phone with &CIS; multi-factor authentication service. Contact the &CIS; service administrator for help.</doc>
            <representation mediaType="application/json"/>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element"/>
        </response>
    </method>
    
    <method id="generateBypassCodes" name="POST">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" xml:lang="EN" title="Generate bypass codes">
            <para role="shortdesc">Generates a bypass code that can be substituted for a multi-factor authentication passcode.  
            </para>
            <para>The Generate bypass codes operation helps users recover access to an account if they cannot 
                retrieve the multi-factor authentication passcode from their mobile phone.</para>
           <para>
                <itemizedlist>
                    <listitem>
                        <para>Users can generate as many bypass codes as they need for their own account for later user. 
                            They can also specify how long bypass codes remain valid.</para>
                    </listitem>
                    <listitem>
                        <para>
                            Users with the <parameter>identity:user-admin</parameter> or 
                            <parameter>identity:admin</parameter> role can generate a single bypass code 
                            another user's account. Administrator-generated codes are valid for 30 minutes by default. Administrators can configure 
                            the validity duration from 1 to 360 minutes.
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>Each bypass code can be used only one time. A bypass code remains valid until it expires. Bypass codes 
                are also invalidated if multi-factor authentication is disabled on the account associated with the bypass code.</para>
            <note>
                <para>The Generate bypass codes operation is only supported by the &CIS; V2.0 API. You cannot generate bypass codes from the Cloud Control panel.</para>
            </note>
        </wadl:doc>
        <request>
            <representation mediaType="application/json" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/BypassCodesRequest.json" />
                </wadl:doc>
            </representation>
            
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/BypassCodesRequest.xml"/>
                </wadl:doc>
                <param name="RAX-AUTH:bypassCodess"  style="plain" required="false">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">
                        <para>
                            This object specifies the <parameter>validityDuration</parameter> and 
                            <parameter>numberofcodes</parameter> attributes for the Generate 
                            bypass codes operation.  See the XML and JSON request examples for 
                            the correct syntax.
                        </para>
                    </wadl:doc>
                </param>
                <param name="validityDuration" style="plain" type="xsd:duration" required="false">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">
                        <para>An attribute of the <parameter>RAX-AUTH:bypassCodes</parameter> element. Specifies the time interval that the bypass codes remain valid. 
                            If no value is specified, the value defaults to 30 minutes <code>PT30M</code>.</para>
                        <para>If the bypass codes are for your own account, customize the value as needed.</para>
                        <para>Administrators can configure an interval between 1 and 360 minutes when 
                            creating a bypass code for other user account.</para>
                        
                        <para>The value is expressed in xsd:duration format, <code>PT20MPnYnMnDTnHnMnS</code> where</para> 
                        
                        <para><parameter>P</parameter> indicates the period (required)</para>
                        <para><parameter>nY</parameter> indicates the number of years</para>
                        <para><parameter>nM</parameter> indicates the number of months</para> 
                        <para><parameter>nD</parameter> indicates the number of days</para>
                        <para><parameter>T</parameter> indicates the start time of a section (required if the duration value includes hours, minutes, or seconds)</para>
                        <para><parameter>nH</parameter> indicates the number of hours</para>
                        <para><parameter>nM</parameter> indicates the number of minutes</para>
                        <para><parameter>nS</parameter> indicates the number of seconds</para>
                    </wadl:doc>
                </param>
                <param name="numberofcodes" style="plain" type="xsd:integer" required="false">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">
                        <para>An attribute of the <parameter>RAX-AUTH:bypassCodes</parameter> element 
                            that specifies the number of bypass codes to generate. 
                            If not specified, the value defaults to <code>1</code>. 
                            Users can generate up to 10 bypass codes for their own account. Administrators 
                            can generate only one bypass code for user accounts other than their own.
                        </para>
                    </wadl:doc>
                </param>
            </representation>
        </request>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="OK">The request succeeded.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/BypassCodesResponse.xml" />
                </wadl:doc>
                <param name="RAX-AUTH:bypassCodes"  style="plain" required="false">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">
                        <para>
                            This object returns the list of <parameter>bypass codes</parameter> and the 
                            <parameter>validityDuration</parameter> setting that specifies how long the codes are valid. 
                            See the XML and JSON request examples for the correct syntax.
                        </para>
                    </wadl:doc>
                </param>
                <param name="codes" style="plain" type="RAX-AUTH:StringList" required="false">
                    <wadl:doc>Returns a list of the generated bypass codes.</wadl:doc>
                </param>
                <param name="validityDuration" style="plain" type="xsd:duration" required="false">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">
                        <para>The time interval that specifies how long the generated codes remain valid.
                        </para>
                    </wadl:doc>
                </param>
            </representation>
            <representation mediaType="application/json" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/BypassCodesResponse.json" />
                </wadl:doc>
            </representation>
        </response>
        &commonFaults;
        &postPutFaults;
    </method>
    
    <method id="unlockMultifactorForUser" name="PUT">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Unlock user account">
            <para role="shortdesc">Unlocks an account that was disabled because of too many failed login attempts or disablement.</para>
            <para>The Identity service has a system-configured threshold for failed authentication attempts from a multifactor-enabled device.
                The default threshold is 6. If a user enters incorrect multi-factor authentication credentials more than 6 times, the Identity service locks 
                the account.
            </para>
                
            <para>A Rackspace Cloud administrator can unlock an account by submitting an Unlock request with <code>unlock=true</code> or 
                by using the Remove multi-factor settings operation to remove multi-factor authentication capabilities from the account. 
                Users cannot unlock their own account.</para>
            <para>This operation cannot be used to lock an account. If you submit the 
                request with <code>unlock=false</code>, the operation does not make any changes to the account.</para>
            <note><para> 
                The functionality described in this section is provided by the <code>RAX-AUTH</code> 
                extension to the core Identity API.  For more information, see 
                <xref linkend="Extensions-d1e688"/>.  
            </para></note>
        </wadl:doc>
        <request>
         
            <representation mediaType="application/json" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/MultiFacUnlockReq.json"/>
                    <para>This operation does not accept a response body.</para>
               </wadl:doc>
            </representation>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook">
                    <xsdxt:code href="../common/samples/MultiFacUnlockReq.xml"/>
                </wadl:doc>
                <!--             <param name="unlock" style="template" type="xsd:boolean" required="false">
                    <wadl:doc xmlns="http://docbook.org/ns/docbook">
                        <para>A boolean value that indicates the lock status on a user account enabled 
                            for multi-factor authentication. To unlock an account, specify <code>unlock=true</code> 
                            in the Unlock operation request.</para>. </wadl:doc>
                </param> -->
            </representation>
        </request>
        <response status="204" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="No content">The request succeeded. The server fulfilled the request but does not need to return a body.</doc>
            <representation mediaType="application/xml" element="identity:noContent"/>
            <representation mediaType="application/json"/>
        </response> &commonFaults; &getFaults;
    </method> 
    
    <method id="getTokenBySAML" name="POST">
        <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Get token by SAML assertion">
            <para role="shortdesc">Get a token by SAML assertion.</para>
            <para>Cloud Identity supports identity federation through the implementation of the SAML 2 protocol. Using this 
                protocol, you can provide an XML assertion indicating that the identity is already authenticated via a trusted 
                identity provider. Cloud Identity will return a token in response.</para>
        </wadl:doc>
        <wadl:doc xmlns="http://docbook.org/ns/docbook">     
            <note>
                <para>
                    The request must be formatted as XML, but the response can returned in XML or JSON format.
                </para>
            </note>   
        </wadl:doc>
        <request>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Token SAML request: XML">
                    <xsdxt:code href="../common/samples/TokenSAMLReq.xml"/>
                </wadl:doc>
            </representation>
        </request>
        <response status="200" xmlns="http://wadl.dev.java.net/2009/02">
            <doc title="OK">The request succeeded.</doc>
            <representation mediaType="application/xml" xml:lang="EN" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Token SAML response: XML">
                    <xsdxt:code href="../common/samples/TokenSAMLRsp.xml"/>
                </wadl:doc>
            </representation>
            <representation mediaType="application/json" element="capi:element">
                <wadl:doc xmlns="http://docbook.org/ns/docbook" title="Token SAML response: JSON">
                    <xsdxt:code href="../common/samples/TokenSAMLRsp.json"/>
                </wadl:doc>
            </representation>
            </response> &commonFaults; &postPutFaults;
    </method>
</application>
